// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// DateTime: 1/12/2024 8:21:57 PM
// Input file <SQLParser/SQLParser.Language.grammar.y - 1/12/2024 7:54:44 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace CamusDB.Core.SQLParser
{
internal enum Token {error=2,EOF=3,TOR=4,TAND=5,TLIKE=6,
    TILIKE=7,TEQUALS=8,TNOTEQUALS=9,TLESSTHAN=10,TGREATERTHAN=11,TLESSTHANEQUALS=12,
    TGREATERTHANEQUALS=13,TADD=14,TMINUS=15,TMULT=16,TDIGIT=17,TSTRING=18,
    TIDENTIFIER=19,TPLACEHOLDER=20,LPAREN=21,RPAREN=22,TCOMMA=23,TDIV=24,
    TSELECT=25,TFROM=26,TWHERE=27,TORDER=28,TBY=29,TASC=30,
    TDESC=31,TTRUE=32,TFALSE=33,TUPDATE=34,TSET=35,TDELETE=36,
    TINSERT=37,TINTO=38,TVALUES=39,TCREATE=40,TTABLE=41,TNOT=42,
    TNULL=43,TTYPE_STRING=44,TTYPE_INT64=45,TTYPE_FLOAT64=46,TTYPE_OBJECT_ID=47,TPRIMARY=48,
    TKEY=49,TUNIQUE=50,TINDEX=51,TALTER=52,TWADD=53,TDROP=54,
    TCOLUMN=55,TESCAPED_IDENTIFIER=56,TLIMIT=57,TOFFSET=58,TAS=59,TGROUP=60,
    TSHOW=61,TCOLUMNS=62,TTABLES=63,TDESCRIBE=64,TDATABASE=65,TAT=66,
    LBRACE=67,RBRACE=68,TINDEXES=69,TDEFAULT=70};

internal partial struct ValueType
{ 
        public NodeAst n;
        public string s;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class sqlParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[144];
  private static State[] states = new State[265];
  private static string[] nonTerms = new string[] {
      "list", "$accept", "stat", "select_stmt", "update_stmt", "delete_stmt", 
      "insert_stmt", "create_table_stmt", "drop_table_stmt", "alter_table_stmt", 
      "show_stmt", "select_field_list", "select_table", "condition", "order_list", 
      "select_limit_offset", "any_identifier", "insert_field_list", "values_list", 
      "update_list", "create_table_item_list", "field_type", "create_table_constraint", 
      "identifier", "create_table_item", "create_table_constraint_list", "default_expr", 
      "number", "string", "bool", "null", "update_item", "expr", "select_field_item", 
      "placeholder", "insert_field_item", "values_item", "order_item", "equals_expr", 
      "not_equals_expr", "less_than_expr", "greater_than_expr", "less_equals_than_expr", 
      "greater_equals_than_expr", "and_expr", "or_expr", "add_expr", "sub_expr", 
      "mult_expr", "like_expr", "ilike_expr", "simple_expr", "group_paren_expr", 
      "fcall_expr", "projection_all", "use_default_expr", "fcall_argument_list", 
      "fcall_argument_item", "escaped_identifier", };

  static sqlParser() {
    states[0] = new State(new int[]{25,5,34,131,36,144,37,150,40,173,54,206,52,210,61,249,64,261,31,263},new int[]{-1,1,-3,3,-4,4,-5,130,-6,143,-7,149,-8,172,-9,205,-10,209,-11,248});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-3);
    states[5] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-12,6,-34,129,-33,126,-39,63,-14,86,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[6] = new State(new int[]{26,7,23,124});
    states[7] = new State(new int[]{19,28,56,30},new int[]{-13,8,-17,117,-24,27,-59,29});
    states[8] = new State(new int[]{27,9,28,106,57,113,3,-11});
    states[9] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-14,10,-33,62,-39,63,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[10] = new State(new int[]{28,11,57,32,8,36,9,38,10,40,11,42,12,44,13,46,5,48,4,50,14,52,15,54,16,56,6,58,7,60,3,-12});
    states[11] = new State(new int[]{29,12});
    states[12] = new State(new int[]{19,28,56,30},new int[]{-15,13,-38,31,-17,24,-24,27,-59,29});
    states[13] = new State(new int[]{57,14,23,22,3,-14});
    states[14] = new State(new int[]{17,19,20,21},new int[]{-16,15,-28,18,-35,20});
    states[15] = new State(new int[]{58,16,3,-20});
    states[16] = new State(new int[]{17,19,20,21},new int[]{-16,17,-28,18,-35,20});
    states[17] = new State(-22);
    states[18] = new State(-75);
    states[19] = new State(-138);
    states[20] = new State(-76);
    states[21] = new State(-143);
    states[22] = new State(new int[]{19,28,56,30},new int[]{-38,23,-17,24,-24,27,-59,29});
    states[23] = new State(-83);
    states[24] = new State(new int[]{30,25,31,26,57,-85,23,-85,3,-85});
    states[25] = new State(-86);
    states[26] = new State(-87);
    states[27] = new State(-134);
    states[28] = new State(-136);
    states[29] = new State(-135);
    states[30] = new State(-137);
    states[31] = new State(-84);
    states[32] = new State(new int[]{17,19,20,21},new int[]{-16,33,-28,18,-35,20});
    states[33] = new State(new int[]{58,34,3,-17});
    states[34] = new State(new int[]{17,19,20,21},new int[]{-16,35,-28,18,-35,20});
    states[35] = new State(-18);
    states[36] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-14,37,-33,62,-39,63,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[37] = new State(new int[]{8,-109,9,-109,10,40,11,42,12,44,13,46,5,-109,4,-109,14,52,15,54,16,56,6,-109,7,-109,59,-109,26,-109,23,-109,28,-109,57,-109,3,-109,22,-109,27,-109});
    states[38] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-14,39,-33,62,-39,63,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[39] = new State(new int[]{8,-110,9,-110,10,40,11,42,12,44,13,46,5,-110,4,-110,14,52,15,54,16,56,6,-110,7,-110,59,-110,26,-110,23,-110,28,-110,57,-110,3,-110,22,-110,27,-110});
    states[40] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-14,41,-33,62,-39,63,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[41] = new State(new int[]{8,-111,9,-111,10,-111,11,-111,12,-111,13,-111,5,-111,4,-111,14,52,15,54,16,56,6,-111,7,-111,59,-111,26,-111,23,-111,28,-111,57,-111,3,-111,22,-111,27,-111});
    states[42] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-14,43,-33,62,-39,63,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[43] = new State(new int[]{8,-112,9,-112,10,-112,11,-112,12,-112,13,-112,5,-112,4,-112,14,52,15,54,16,56,6,-112,7,-112,59,-112,26,-112,23,-112,28,-112,57,-112,3,-112,22,-112,27,-112});
    states[44] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-14,45,-33,62,-39,63,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[45] = new State(new int[]{8,-114,9,-114,10,-114,11,-114,12,-114,13,-114,5,-114,4,-114,14,52,15,54,16,56,6,-114,7,-114,59,-114,26,-114,23,-114,28,-114,57,-114,3,-114,22,-114,27,-114});
    states[46] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-14,47,-33,62,-39,63,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[47] = new State(new int[]{8,-113,9,-113,10,-113,11,-113,12,-113,13,-113,5,-113,4,-113,14,52,15,54,16,56,6,-113,7,-113,59,-113,26,-113,23,-113,28,-113,57,-113,3,-113,22,-113,27,-113});
    states[48] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-14,49,-33,62,-39,63,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[49] = new State(new int[]{8,36,9,38,10,40,11,42,12,44,13,46,5,-107,4,-107,14,52,15,54,16,56,6,58,7,60,59,-107,26,-107,23,-107,28,-107,57,-107,3,-107,22,-107,27,-107});
    states[50] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-14,51,-33,62,-39,63,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[51] = new State(new int[]{8,36,9,38,10,40,11,42,12,44,13,46,5,48,4,-108,14,52,15,54,16,56,6,58,7,60,59,-108,26,-108,23,-108,28,-108,57,-108,3,-108,22,-108,27,-108});
    states[52] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-14,53,-33,62,-39,63,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[53] = new State(new int[]{8,-115,9,-115,10,-115,11,-115,12,-115,13,-115,5,-115,4,-115,14,-115,15,-115,16,56,6,-115,7,-115,59,-115,26,-115,23,-115,28,-115,57,-115,3,-115,22,-115,27,-115});
    states[54] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-14,55,-33,62,-39,63,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[55] = new State(new int[]{8,-116,9,-116,10,-116,11,-116,12,-116,13,-116,5,-116,4,-116,14,-116,15,-116,16,56,6,-116,7,-116,59,-116,26,-116,23,-116,28,-116,57,-116,3,-116,22,-116,27,-116});
    states[56] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-14,57,-33,62,-39,63,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[57] = new State(-117);
    states[58] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-14,59,-33,62,-39,63,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[59] = new State(new int[]{8,36,9,38,10,40,11,42,12,44,13,46,5,-118,4,-118,14,52,15,54,16,56,6,-118,7,-118,59,-118,26,-118,23,-118,28,-118,57,-118,3,-118,22,-118,27,-118});
    states[60] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-14,61,-33,62,-39,63,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[61] = new State(new int[]{8,36,9,38,10,40,11,42,12,44,13,46,5,-119,4,-119,14,52,15,54,16,56,6,-119,7,-119,59,-119,26,-119,23,-119,28,-119,57,-119,3,-119,22,-119,27,-119});
    states[62] = new State(-88);
    states[63] = new State(-89);
    states[64] = new State(-90);
    states[65] = new State(-91);
    states[66] = new State(-92);
    states[67] = new State(-93);
    states[68] = new State(-94);
    states[69] = new State(-95);
    states[70] = new State(-96);
    states[71] = new State(-97);
    states[72] = new State(-98);
    states[73] = new State(-99);
    states[74] = new State(-100);
    states[75] = new State(-101);
    states[76] = new State(-102);
    states[77] = new State(-126);
    states[78] = new State(new int[]{21,79,59,-134,26,-134,23,-134,8,-134,9,-134,10,-134,11,-134,12,-134,13,-134,5,-134,4,-134,14,-134,15,-134,16,-134,6,-134,7,-134,28,-134,57,-134,3,-134,22,-134,27,-134});
    states[79] = new State(new int[]{22,80,19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-57,81,-58,105,-33,85,-39,63,-14,86,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[80] = new State(-120);
    states[81] = new State(new int[]{22,82,23,83});
    states[82] = new State(-121);
    states[83] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-58,84,-33,85,-39,63,-14,86,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[84] = new State(-122);
    states[85] = new State(new int[]{22,-124,23,-124,8,-88,9,-88,10,-88,11,-88,12,-88,13,-88,5,-88,4,-88,14,-88,15,-88,16,-88,6,-88,7,-88});
    states[86] = new State(new int[]{8,36,9,38,10,40,11,42,12,44,13,46,5,48,4,50,14,52,15,54,16,56,6,58,7,60});
    states[87] = new State(-127);
    states[88] = new State(-128);
    states[89] = new State(-139);
    states[90] = new State(-129);
    states[91] = new State(-140);
    states[92] = new State(-141);
    states[93] = new State(-130);
    states[94] = new State(-142);
    states[95] = new State(-131);
    states[96] = new State(-103);
    states[97] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-14,98,-33,62,-39,63,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[98] = new State(new int[]{22,99,8,36,9,38,10,40,11,42,12,44,13,46,5,48,4,50,14,52,15,54,16,56,6,58,7,60});
    states[99] = new State(-125);
    states[100] = new State(-104);
    states[101] = new State(-105);
    states[102] = new State(-133);
    states[103] = new State(-106);
    states[104] = new State(-132);
    states[105] = new State(-123);
    states[106] = new State(new int[]{29,107});
    states[107] = new State(new int[]{19,28,56,30},new int[]{-15,108,-38,31,-17,24,-24,27,-59,29});
    states[108] = new State(new int[]{57,109,23,22,3,-13});
    states[109] = new State(new int[]{17,19,20,21},new int[]{-16,110,-28,18,-35,20});
    states[110] = new State(new int[]{58,111,3,-19});
    states[111] = new State(new int[]{17,19,20,21},new int[]{-16,112,-28,18,-35,20});
    states[112] = new State(-21);
    states[113] = new State(new int[]{17,19,20,21},new int[]{-16,114,-28,18,-35,20});
    states[114] = new State(new int[]{58,115,3,-15});
    states[115] = new State(new int[]{17,19,20,21},new int[]{-16,116,-28,18,-35,20});
    states[116] = new State(-16);
    states[117] = new State(new int[]{66,118,27,-47,28,-47,57,-47,3,-47});
    states[118] = new State(new int[]{67,119});
    states[119] = new State(new int[]{19,28},new int[]{-24,120});
    states[120] = new State(new int[]{8,121});
    states[121] = new State(new int[]{19,28},new int[]{-24,122});
    states[122] = new State(new int[]{68,123});
    states[123] = new State(-48);
    states[124] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-34,125,-33,126,-39,63,-14,86,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[125] = new State(-71);
    states[126] = new State(new int[]{59,127,26,-73,23,-73,8,-88,9,-88,10,-88,11,-88,12,-88,13,-88,5,-88,4,-88,14,-88,15,-88,16,-88,6,-88,7,-88});
    states[127] = new State(new int[]{19,28,56,30},new int[]{-17,128,-24,27,-59,29});
    states[128] = new State(-74);
    states[129] = new State(-72);
    states[130] = new State(-4);
    states[131] = new State(new int[]{19,28,56,30},new int[]{-17,132,-24,27,-59,29});
    states[132] = new State(new int[]{35,133});
    states[133] = new State(new int[]{19,28,56,30},new int[]{-20,134,-32,142,-17,139,-24,27,-59,29});
    states[134] = new State(new int[]{27,135,23,137});
    states[135] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-14,136,-33,62,-39,63,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[136] = new State(new int[]{8,36,9,38,10,40,11,42,12,44,13,46,5,48,4,50,14,52,15,54,16,56,6,58,7,60,3,-25});
    states[137] = new State(new int[]{19,28,56,30},new int[]{-32,138,-17,139,-24,27,-59,29});
    states[138] = new State(-68);
    states[139] = new State(new int[]{8,140});
    states[140] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-33,141,-39,63,-14,86,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[141] = new State(new int[]{27,-70,23,-70,8,-88,9,-88,10,-88,11,-88,12,-88,13,-88,5,-88,4,-88,14,-88,15,-88,16,-88,6,-88,7,-88});
    states[142] = new State(-69);
    states[143] = new State(-5);
    states[144] = new State(new int[]{26,145});
    states[145] = new State(new int[]{19,28,56,30},new int[]{-17,146,-24,27,-59,29});
    states[146] = new State(new int[]{27,147});
    states[147] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-14,148,-33,62,-39,63,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[148] = new State(new int[]{8,36,9,38,10,40,11,42,12,44,13,46,5,48,4,50,14,52,15,54,16,56,6,58,7,60,3,-26});
    states[149] = new State(-6);
    states[150] = new State(new int[]{38,151});
    states[151] = new State(new int[]{19,28,56,30},new int[]{-17,152,-24,27,-59,29});
    states[152] = new State(new int[]{21,153,39,168});
    states[153] = new State(new int[]{19,28,56,30},new int[]{-18,154,-36,167,-17,166,-24,27,-59,29});
    states[154] = new State(new int[]{22,155,23,164});
    states[155] = new State(new int[]{39,156});
    states[156] = new State(new int[]{21,157});
    states[157] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-19,158,-37,163,-33,162,-39,63,-14,86,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[158] = new State(new int[]{22,159,23,160});
    states[159] = new State(-23);
    states[160] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-37,161,-33,162,-39,63,-14,86,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[161] = new State(-80);
    states[162] = new State(new int[]{22,-82,23,-82,8,-88,9,-88,10,-88,11,-88,12,-88,13,-88,5,-88,4,-88,14,-88,15,-88,16,-88,6,-88,7,-88});
    states[163] = new State(-81);
    states[164] = new State(new int[]{19,28,56,30},new int[]{-36,165,-17,166,-24,27,-59,29});
    states[165] = new State(-77);
    states[166] = new State(-79);
    states[167] = new State(-78);
    states[168] = new State(new int[]{21,169});
    states[169] = new State(new int[]{19,28,56,30,17,19,18,89,32,91,33,92,43,94,20,21,21,97,16,102,70,104},new int[]{-19,170,-37,163,-33,162,-39,63,-14,86,-40,64,-41,65,-42,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-17,77,-24,78,-59,29,-28,87,-29,88,-30,90,-31,93,-35,95,-53,96,-54,100,-55,101,-56,103});
    states[170] = new State(new int[]{22,171,23,160});
    states[171] = new State(-24);
    states[172] = new State(-7);
    states[173] = new State(new int[]{41,174});
    states[174] = new State(new int[]{19,28,56,30},new int[]{-17,175,-24,27,-59,29});
    states[175] = new State(new int[]{21,176});
    states[176] = new State(new int[]{19,28,56,30},new int[]{-21,177,-25,204,-17,181,-24,27,-59,29});
    states[177] = new State(new int[]{22,178,23,179});
    states[178] = new State(-27);
    states[179] = new State(new int[]{19,28,56,30},new int[]{-25,180,-17,181,-24,27,-59,29});
    states[180] = new State(-49);
    states[181] = new State(new int[]{47,200,44,201,45,202,46,203},new int[]{-22,182});
    states[182] = new State(new int[]{43,185,42,186,48,188,50,190,70,191,22,-51,23,-51},new int[]{-26,183,-23,199});
    states[183] = new State(new int[]{43,185,42,186,48,188,50,190,70,191,22,-52,23,-52},new int[]{-23,184});
    states[184] = new State(-53);
    states[185] = new State(-55);
    states[186] = new State(new int[]{43,187});
    states[187] = new State(-56);
    states[188] = new State(new int[]{49,189});
    states[189] = new State(-57);
    states[190] = new State(-58);
    states[191] = new State(new int[]{21,192});
    states[192] = new State(new int[]{17,19,18,89,32,91,33,92,43,94},new int[]{-27,193,-28,195,-29,196,-30,197,-31,198});
    states[193] = new State(new int[]{22,194});
    states[194] = new State(-59);
    states[195] = new State(-60);
    states[196] = new State(-61);
    states[197] = new State(-62);
    states[198] = new State(-63);
    states[199] = new State(-54);
    states[200] = new State(-64);
    states[201] = new State(-65);
    states[202] = new State(-66);
    states[203] = new State(-67);
    states[204] = new State(-50);
    states[205] = new State(-8);
    states[206] = new State(new int[]{41,207});
    states[207] = new State(new int[]{19,28,56,30},new int[]{-17,208,-24,27,-59,29});
    states[208] = new State(-28);
    states[209] = new State(-9);
    states[210] = new State(new int[]{41,211});
    states[211] = new State(new int[]{19,28,56,30},new int[]{-17,212,-24,27,-59,29});
    states[212] = new State(new int[]{53,213,54,240});
    states[213] = new State(new int[]{55,216,51,220,50,225,48,235,19,28,56,30},new int[]{-17,214,-24,27,-59,29});
    states[214] = new State(new int[]{47,200,44,201,45,202,46,203},new int[]{-22,215});
    states[215] = new State(-29);
    states[216] = new State(new int[]{19,28,56,30},new int[]{-17,217,-24,27,-59,29});
    states[217] = new State(new int[]{47,200,44,201,45,202,46,203},new int[]{-22,218});
    states[218] = new State(new int[]{43,185,42,186,48,188,50,190,70,191,3,-30},new int[]{-23,219});
    states[219] = new State(-31);
    states[220] = new State(new int[]{19,28,56,30},new int[]{-17,221,-24,27,-59,29});
    states[221] = new State(new int[]{21,222});
    states[222] = new State(new int[]{19,28,56,30},new int[]{-17,223,-24,27,-59,29});
    states[223] = new State(new int[]{22,224});
    states[224] = new State(-34);
    states[225] = new State(new int[]{51,230,19,28,56,30},new int[]{-17,226,-24,27,-59,29});
    states[226] = new State(new int[]{21,227});
    states[227] = new State(new int[]{19,28,56,30},new int[]{-17,228,-24,27,-59,29});
    states[228] = new State(new int[]{22,229});
    states[229] = new State(-35);
    states[230] = new State(new int[]{19,28,56,30},new int[]{-17,231,-24,27,-59,29});
    states[231] = new State(new int[]{21,232});
    states[232] = new State(new int[]{19,28,56,30},new int[]{-17,233,-24,27,-59,29});
    states[233] = new State(new int[]{22,234});
    states[234] = new State(-36);
    states[235] = new State(new int[]{49,236});
    states[236] = new State(new int[]{21,237});
    states[237] = new State(new int[]{19,28,56,30},new int[]{-17,238,-24,27,-59,29});
    states[238] = new State(new int[]{22,239});
    states[239] = new State(-38);
    states[240] = new State(new int[]{55,242,51,244,48,246,19,28,56,30},new int[]{-17,241,-24,27,-59,29});
    states[241] = new State(-32);
    states[242] = new State(new int[]{19,28,56,30},new int[]{-17,243,-24,27,-59,29});
    states[243] = new State(-33);
    states[244] = new State(new int[]{19,28,56,30},new int[]{-17,245,-24,27,-59,29});
    states[245] = new State(-37);
    states[246] = new State(new int[]{49,247});
    states[247] = new State(-39);
    states[248] = new State(-10);
    states[249] = new State(new int[]{62,250,63,253,40,254,65,257,69,258});
    states[250] = new State(new int[]{26,251});
    states[251] = new State(new int[]{19,28,56,30},new int[]{-17,252,-24,27,-59,29});
    states[252] = new State(-40);
    states[253] = new State(-41);
    states[254] = new State(new int[]{41,255});
    states[255] = new State(new int[]{19,28,56,30},new int[]{-17,256,-24,27,-59,29});
    states[256] = new State(-44);
    states[257] = new State(-45);
    states[258] = new State(new int[]{26,259});
    states[259] = new State(new int[]{19,28,56,30},new int[]{-17,260,-24,27,-59,29});
    states[260] = new State(-46);
    states[261] = new State(new int[]{19,28,56,30},new int[]{-17,262,-24,27,-59,29});
    states[262] = new State(-42);
    states[263] = new State(new int[]{19,28,56,30},new int[]{-17,264,-24,27,-59,29});
    states[264] = new State(-43);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{-5});
    rules[5] = new Rule(-3, new int[]{-6});
    rules[6] = new Rule(-3, new int[]{-7});
    rules[7] = new Rule(-3, new int[]{-8});
    rules[8] = new Rule(-3, new int[]{-9});
    rules[9] = new Rule(-3, new int[]{-10});
    rules[10] = new Rule(-3, new int[]{-11});
    rules[11] = new Rule(-4, new int[]{25,-12,26,-13});
    rules[12] = new Rule(-4, new int[]{25,-12,26,-13,27,-14});
    rules[13] = new Rule(-4, new int[]{25,-12,26,-13,28,29,-15});
    rules[14] = new Rule(-4, new int[]{25,-12,26,-13,27,-14,28,29,-15});
    rules[15] = new Rule(-4, new int[]{25,-12,26,-13,57,-16});
    rules[16] = new Rule(-4, new int[]{25,-12,26,-13,57,-16,58,-16});
    rules[17] = new Rule(-4, new int[]{25,-12,26,-13,27,-14,57,-16});
    rules[18] = new Rule(-4, new int[]{25,-12,26,-13,27,-14,57,-16,58,-16});
    rules[19] = new Rule(-4, new int[]{25,-12,26,-13,28,29,-15,57,-16});
    rules[20] = new Rule(-4, new int[]{25,-12,26,-13,27,-14,28,29,-15,57,-16});
    rules[21] = new Rule(-4, new int[]{25,-12,26,-13,28,29,-15,57,-16,58,-16});
    rules[22] = new Rule(-4, new int[]{25,-12,26,-13,27,-14,28,29,-15,57,-16,58,-16});
    rules[23] = new Rule(-7, new int[]{37,38,-17,21,-18,22,39,21,-19,22});
    rules[24] = new Rule(-7, new int[]{37,38,-17,39,21,-19,22});
    rules[25] = new Rule(-5, new int[]{34,-17,35,-20,27,-14});
    rules[26] = new Rule(-6, new int[]{36,26,-17,27,-14});
    rules[27] = new Rule(-8, new int[]{40,41,-17,21,-21,22});
    rules[28] = new Rule(-9, new int[]{54,41,-17});
    rules[29] = new Rule(-10, new int[]{52,41,-17,53,-17,-22});
    rules[30] = new Rule(-10, new int[]{52,41,-17,53,55,-17,-22});
    rules[31] = new Rule(-10, new int[]{52,41,-17,53,55,-17,-22,-23});
    rules[32] = new Rule(-10, new int[]{52,41,-17,54,-17});
    rules[33] = new Rule(-10, new int[]{52,41,-17,54,55,-17});
    rules[34] = new Rule(-10, new int[]{52,41,-17,53,51,-17,21,-17,22});
    rules[35] = new Rule(-10, new int[]{52,41,-17,53,50,-17,21,-17,22});
    rules[36] = new Rule(-10, new int[]{52,41,-17,53,50,51,-17,21,-17,22});
    rules[37] = new Rule(-10, new int[]{52,41,-17,54,51,-17});
    rules[38] = new Rule(-10, new int[]{52,41,-17,53,48,49,21,-17,22});
    rules[39] = new Rule(-10, new int[]{52,41,-17,54,48,49});
    rules[40] = new Rule(-11, new int[]{61,62,26,-17});
    rules[41] = new Rule(-11, new int[]{61,63});
    rules[42] = new Rule(-11, new int[]{64,-17});
    rules[43] = new Rule(-11, new int[]{31,-17});
    rules[44] = new Rule(-11, new int[]{61,40,41,-17});
    rules[45] = new Rule(-11, new int[]{61,65});
    rules[46] = new Rule(-11, new int[]{61,69,26,-17});
    rules[47] = new Rule(-13, new int[]{-17});
    rules[48] = new Rule(-13, new int[]{-17,66,67,-24,8,-24,68});
    rules[49] = new Rule(-21, new int[]{-21,23,-25});
    rules[50] = new Rule(-21, new int[]{-25});
    rules[51] = new Rule(-25, new int[]{-17,-22});
    rules[52] = new Rule(-25, new int[]{-17,-22,-26});
    rules[53] = new Rule(-26, new int[]{-26,-23});
    rules[54] = new Rule(-26, new int[]{-23});
    rules[55] = new Rule(-23, new int[]{43});
    rules[56] = new Rule(-23, new int[]{42,43});
    rules[57] = new Rule(-23, new int[]{48,49});
    rules[58] = new Rule(-23, new int[]{50});
    rules[59] = new Rule(-23, new int[]{70,21,-27,22});
    rules[60] = new Rule(-27, new int[]{-28});
    rules[61] = new Rule(-27, new int[]{-29});
    rules[62] = new Rule(-27, new int[]{-30});
    rules[63] = new Rule(-27, new int[]{-31});
    rules[64] = new Rule(-22, new int[]{47});
    rules[65] = new Rule(-22, new int[]{44});
    rules[66] = new Rule(-22, new int[]{45});
    rules[67] = new Rule(-22, new int[]{46});
    rules[68] = new Rule(-20, new int[]{-20,23,-32});
    rules[69] = new Rule(-20, new int[]{-32});
    rules[70] = new Rule(-32, new int[]{-17,8,-33});
    rules[71] = new Rule(-12, new int[]{-12,23,-34});
    rules[72] = new Rule(-12, new int[]{-34});
    rules[73] = new Rule(-34, new int[]{-33});
    rules[74] = new Rule(-34, new int[]{-33,59,-17});
    rules[75] = new Rule(-16, new int[]{-28});
    rules[76] = new Rule(-16, new int[]{-35});
    rules[77] = new Rule(-18, new int[]{-18,23,-36});
    rules[78] = new Rule(-18, new int[]{-36});
    rules[79] = new Rule(-36, new int[]{-17});
    rules[80] = new Rule(-19, new int[]{-19,23,-37});
    rules[81] = new Rule(-19, new int[]{-37});
    rules[82] = new Rule(-37, new int[]{-33});
    rules[83] = new Rule(-15, new int[]{-15,23,-38});
    rules[84] = new Rule(-15, new int[]{-38});
    rules[85] = new Rule(-38, new int[]{-17});
    rules[86] = new Rule(-38, new int[]{-17,30});
    rules[87] = new Rule(-38, new int[]{-17,31});
    rules[88] = new Rule(-14, new int[]{-33});
    rules[89] = new Rule(-33, new int[]{-39});
    rules[90] = new Rule(-33, new int[]{-40});
    rules[91] = new Rule(-33, new int[]{-41});
    rules[92] = new Rule(-33, new int[]{-42});
    rules[93] = new Rule(-33, new int[]{-43});
    rules[94] = new Rule(-33, new int[]{-44});
    rules[95] = new Rule(-33, new int[]{-45});
    rules[96] = new Rule(-33, new int[]{-46});
    rules[97] = new Rule(-33, new int[]{-47});
    rules[98] = new Rule(-33, new int[]{-48});
    rules[99] = new Rule(-33, new int[]{-49});
    rules[100] = new Rule(-33, new int[]{-50});
    rules[101] = new Rule(-33, new int[]{-51});
    rules[102] = new Rule(-33, new int[]{-52});
    rules[103] = new Rule(-33, new int[]{-53});
    rules[104] = new Rule(-33, new int[]{-54});
    rules[105] = new Rule(-33, new int[]{-55});
    rules[106] = new Rule(-33, new int[]{-56});
    rules[107] = new Rule(-45, new int[]{-14,5,-14});
    rules[108] = new Rule(-46, new int[]{-14,4,-14});
    rules[109] = new Rule(-39, new int[]{-14,8,-14});
    rules[110] = new Rule(-40, new int[]{-14,9,-14});
    rules[111] = new Rule(-41, new int[]{-14,10,-14});
    rules[112] = new Rule(-42, new int[]{-14,11,-14});
    rules[113] = new Rule(-44, new int[]{-14,13,-14});
    rules[114] = new Rule(-43, new int[]{-14,12,-14});
    rules[115] = new Rule(-47, new int[]{-14,14,-14});
    rules[116] = new Rule(-48, new int[]{-14,15,-14});
    rules[117] = new Rule(-49, new int[]{-14,16,-14});
    rules[118] = new Rule(-50, new int[]{-14,6,-14});
    rules[119] = new Rule(-51, new int[]{-14,7,-14});
    rules[120] = new Rule(-54, new int[]{-24,21,22});
    rules[121] = new Rule(-54, new int[]{-24,21,-57,22});
    rules[122] = new Rule(-57, new int[]{-57,23,-58});
    rules[123] = new Rule(-57, new int[]{-58});
    rules[124] = new Rule(-58, new int[]{-33});
    rules[125] = new Rule(-53, new int[]{21,-14,22});
    rules[126] = new Rule(-52, new int[]{-17});
    rules[127] = new Rule(-52, new int[]{-28});
    rules[128] = new Rule(-52, new int[]{-29});
    rules[129] = new Rule(-52, new int[]{-30});
    rules[130] = new Rule(-52, new int[]{-31});
    rules[131] = new Rule(-52, new int[]{-35});
    rules[132] = new Rule(-56, new int[]{70});
    rules[133] = new Rule(-55, new int[]{16});
    rules[134] = new Rule(-17, new int[]{-24});
    rules[135] = new Rule(-17, new int[]{-59});
    rules[136] = new Rule(-24, new int[]{19});
    rules[137] = new Rule(-59, new int[]{56});
    rules[138] = new Rule(-28, new int[]{17});
    rules[139] = new Rule(-29, new int[]{18});
    rules[140] = new Rule(-30, new int[]{32});
    rules[141] = new Rule(-30, new int[]{33});
    rules[142] = new Rule(-31, new int[]{43});
    rules[143] = new Rule(-35, new int[]{20});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // list -> stat
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 3: // stat -> select_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 4: // stat -> update_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 5: // stat -> delete_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 6: // stat -> insert_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 7: // stat -> create_table_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 8: // stat -> drop_table_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 9: // stat -> alter_table_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 10: // stat -> show_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 11: // select_stmt -> TSELECT, select_field_list, TFROM, select_table
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 12: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TWHERE, 
               //                condition
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null); }
        break;
      case 13: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TORDER, TBY, 
               //                order_list
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-4].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null); }
        break;
      case 14: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TWHERE, 
               //                condition, TORDER, TBY, order_list
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-8].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-1].n, null, null, null); }
        break;
      case 15: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TLIMIT, 
               //                select_limit_offset
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-3].n, null, null, ValueStack[ValueStack.Depth-1].n, null, null); }
        break;
      case 16: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TLIMIT, 
               //                select_limit_offset, TOFFSET, select_limit_offset
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-7].n, ValueStack[ValueStack.Depth-5].n, null, null, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null); }
        break;
      case 17: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TWHERE, 
               //                condition, TLIMIT, select_limit_offset
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-7].n, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-3].n, null, ValueStack[ValueStack.Depth-1].n, null, null); }
        break;
      case 18: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TWHERE, 
               //                condition, TLIMIT, select_limit_offset, TOFFSET, 
               //                select_limit_offset
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-9].n, ValueStack[ValueStack.Depth-7].n, ValueStack[ValueStack.Depth-5].n, null, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null); }
        break;
      case 19: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TORDER, TBY, 
               //                order_list, TLIMIT, select_limit_offset
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-8].n, ValueStack[ValueStack.Depth-6].n, null, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null); }
        break;
      case 20: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TWHERE, 
               //                condition, TORDER, TBY, order_list, TLIMIT, select_limit_offset
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-10].n, ValueStack[ValueStack.Depth-8].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null); }
        break;
      case 21: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TORDER, TBY, 
               //                order_list, TLIMIT, select_limit_offset, TOFFSET, 
               //                select_limit_offset
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-10].n, ValueStack[ValueStack.Depth-8].n, null, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null); }
        break;
      case 22: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TWHERE, 
               //                condition, TORDER, TBY, order_list, TLIMIT, select_limit_offset, 
               //                TOFFSET, select_limit_offset
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-12].n, ValueStack[ValueStack.Depth-10].n, ValueStack[ValueStack.Depth-8].n, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null); }
        break;
      case 23: // insert_stmt -> TINSERT, TINTO, any_identifier, LPAREN, insert_field_list, 
               //                RPAREN, TVALUES, LPAREN, values_list, RPAREN
{ CurrentSemanticValue.n = new(NodeType.Insert, ValueStack[ValueStack.Depth-8].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null); }
        break;
      case 24: // insert_stmt -> TINSERT, TINTO, any_identifier, TVALUES, LPAREN, values_list, 
               //                RPAREN
{ CurrentSemanticValue.n = new(NodeType.Insert, ValueStack[ValueStack.Depth-5].n, null, ValueStack[ValueStack.Depth-2].n, null, null, null, null); }
        break;
      case 25: // update_stmt -> TUPDATE, any_identifier, TSET, update_list, TWHERE, condition
{ CurrentSemanticValue.n = new(NodeType.Update, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null); }
        break;
      case 26: // delete_stmt -> TDELETE, TFROM, any_identifier, TWHERE, condition
{ CurrentSemanticValue.n = new(NodeType.Delete, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 27: // create_table_stmt -> TCREATE, TTABLE, any_identifier, LPAREN, 
               //                      create_table_item_list, RPAREN
{ CurrentSemanticValue.n = new(NodeType.CreateTable, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null); }
        break;
      case 28: // drop_table_stmt -> TDROP, TTABLE, any_identifier
{ CurrentSemanticValue.n = new(NodeType.DropTable, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null); }
        break;
      case 29: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TWADD, any_identifier, 
               //                     field_type
{ CurrentSemanticValue.n = new(NodeType.AlterTableAddColumn, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null); }
        break;
      case 30: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TWADD, TCOLUMN, 
               //                     any_identifier, field_type
{ CurrentSemanticValue.n = new(NodeType.AlterTableAddColumn, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null); }
        break;
      case 31: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TWADD, TCOLUMN, 
               //                     any_identifier, field_type, create_table_constraint
{ CurrentSemanticValue.n = new(NodeType.AlterTableAddColumn, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null); }
        break;
      case 32: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TDROP, any_identifier
{ CurrentSemanticValue.n = new(NodeType.AlterTableDropColumn, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 33: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TDROP, TCOLUMN, 
               //                     any_identifier
{ CurrentSemanticValue.n = new(NodeType.AlterTableDropColumn, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 34: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TWADD, TINDEX, 
               //                     any_identifier, LPAREN, any_identifier, RPAREN
{ CurrentSemanticValue.n = new(NodeType.AlterTableAddIndex, ValueStack[ValueStack.Depth-7].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null); }
        break;
      case 35: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TWADD, TUNIQUE, 
               //                     any_identifier, LPAREN, any_identifier, RPAREN
{ CurrentSemanticValue.n = new(NodeType.AlterTableAddUniqueIndex, ValueStack[ValueStack.Depth-7].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null); }
        break;
      case 36: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TWADD, TUNIQUE, TINDEX, 
               //                     any_identifier, LPAREN, any_identifier, RPAREN
{ CurrentSemanticValue.n = new(NodeType.AlterTableAddUniqueIndex, ValueStack[ValueStack.Depth-8].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null); }
        break;
      case 37: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TDROP, TINDEX, 
               //                     any_identifier
{ CurrentSemanticValue.n = new(NodeType.AlterTableDropIndex, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 38: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TWADD, TPRIMARY, TKEY, 
               //                     LPAREN, any_identifier, RPAREN
{ CurrentSemanticValue.n = new(NodeType.AlterTableAddPrimaryKey, ValueStack[ValueStack.Depth-7].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null); }
        break;
      case 39: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TDROP, TPRIMARY, TKEY
{ CurrentSemanticValue.n = new(NodeType.AlterTableDropPrimaryKey, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, null); }
        break;
      case 40: // show_stmt -> TSHOW, TCOLUMNS, TFROM, any_identifier
{ CurrentSemanticValue.n = new(NodeType.ShowColumns, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null); }
        break;
      case 41: // show_stmt -> TSHOW, TTABLES
{ CurrentSemanticValue.n = new(NodeType.ShowTables, null, null, null, null, null, null, null); }
        break;
      case 42: // show_stmt -> TDESCRIBE, any_identifier
{ CurrentSemanticValue.n = new(NodeType.ShowColumns, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null); }
        break;
      case 43: // show_stmt -> TDESC, any_identifier
{ CurrentSemanticValue.n = new(NodeType.ShowColumns, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null); }
        break;
      case 44: // show_stmt -> TSHOW, TCREATE, TTABLE, any_identifier
{ CurrentSemanticValue.n = new(NodeType.ShowCreateTable, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null); }
        break;
      case 45: // show_stmt -> TSHOW, TDATABASE
{ CurrentSemanticValue.n = new(NodeType.ShowDatabase, null, null, null, null, null, null, null); }
        break;
      case 46: // show_stmt -> TSHOW, TINDEXES, TFROM, any_identifier
{ CurrentSemanticValue.n = new(NodeType.ShowIndexes, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null); }
        break;
      case 47: // select_table -> any_identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 48: // select_table -> any_identifier, TAT, LBRACE, identifier, TEQUALS, identifier, 
               //                 RBRACE
{ CurrentSemanticValue.n = new(NodeType.IdentifierWithOpts, ValueStack[ValueStack.Depth-7].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null); }
        break;
      case 49: // create_table_item_list -> create_table_item_list, TCOMMA, create_table_item
{ CurrentSemanticValue.n = new(NodeType.CreateTableItemList, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 50: // create_table_item_list -> create_table_item
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 51: // create_table_item -> any_identifier, field_type
{ CurrentSemanticValue.n = new(NodeType.CreateTableItem, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 52: // create_table_item -> any_identifier, field_type, create_table_constraint_list
{ CurrentSemanticValue.n = new(NodeType.CreateTableItem, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null); }
        break;
      case 53: // create_table_constraint_list -> create_table_constraint_list, 
               //                                 create_table_constraint
{ CurrentSemanticValue.n = new(NodeType.CreateTableConstraintList, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 54: // create_table_constraint_list -> create_table_constraint
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 55: // create_table_constraint -> TNULL
{ CurrentSemanticValue.n = new(NodeType.ConstraintNull, null, null, null, null, null, null, null); }
        break;
      case 56: // create_table_constraint -> TNOT, TNULL
{ CurrentSemanticValue.n = new(NodeType.ConstraintNotNull, null, null, null, null, null, null, null); }
        break;
      case 57: // create_table_constraint -> TPRIMARY, TKEY
{ CurrentSemanticValue.n = new(NodeType.ConstraintPrimaryKey, null, null, null, null, null, null, null); }
        break;
      case 58: // create_table_constraint -> TUNIQUE
{ CurrentSemanticValue.n = new(NodeType.ConstraintUnique, null, null, null, null, null, null, null); }
        break;
      case 59: // create_table_constraint -> TDEFAULT, LPAREN, default_expr, RPAREN
{ CurrentSemanticValue.n = new(NodeType.ConstraintDefault, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, null); }
        break;
      case 60: // default_expr -> number
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 61: // default_expr -> string
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 62: // default_expr -> bool
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 63: // default_expr -> null
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 64: // field_type -> TTYPE_OBJECT_ID
{ CurrentSemanticValue.n = new(NodeType.TypeObjectId, null, null, null, null, null, null, null); }
        break;
      case 65: // field_type -> TTYPE_STRING
{ CurrentSemanticValue.n = new(NodeType.TypeString, null, null, null, null, null, null, null); }
        break;
      case 66: // field_type -> TTYPE_INT64
{ CurrentSemanticValue.n = new(NodeType.TypeInteger64, null, null, null, null, null, null, null); }
        break;
      case 67: // field_type -> TTYPE_FLOAT64
{ CurrentSemanticValue.n = new(NodeType.TypeFloat64, null, null, null, null, null, null, null); }
        break;
      case 68: // update_list -> update_list, TCOMMA, update_item
{ CurrentSemanticValue.n = new(NodeType.UpdateList, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 69: // update_list -> update_item
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 70: // update_item -> any_identifier, TEQUALS, expr
{ CurrentSemanticValue.n = new(NodeType.UpdateItem, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 71: // select_field_list -> select_field_list, TCOMMA, select_field_item
{ CurrentSemanticValue.n = new(NodeType.IdentifierList, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 72: // select_field_list -> select_field_item
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 73: // select_field_item -> expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 74: // select_field_item -> expr, TAS, any_identifier
{ CurrentSemanticValue.n = new(NodeType.ExprAlias, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 75: // select_limit_offset -> number
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 76: // select_limit_offset -> placeholder
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 77: // insert_field_list -> insert_field_list, TCOMMA, insert_field_item
{ CurrentSemanticValue.n = new(NodeType.IdentifierList, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 78: // insert_field_list -> insert_field_item
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 79: // insert_field_item -> any_identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 80: // values_list -> values_list, TCOMMA, values_item
{ CurrentSemanticValue.n = new(NodeType.ExprList, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 81: // values_list -> values_item
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 82: // values_item -> expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 83: // order_list -> order_list, TCOMMA, order_item
{ CurrentSemanticValue.n = new(NodeType.IdentifierList, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 84: // order_list -> order_item
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 85: // order_item -> any_identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 86: // order_item -> any_identifier, TASC
{ CurrentSemanticValue.n = new(NodeType.SortAsc, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 87: // order_item -> any_identifier, TDESC
{ CurrentSemanticValue.n = new(NodeType.SortDesc, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 88: // condition -> expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 89: // expr -> equals_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 90: // expr -> not_equals_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 91: // expr -> less_than_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 92: // expr -> greater_than_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 93: // expr -> less_equals_than_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 94: // expr -> greater_equals_than_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 95: // expr -> and_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 96: // expr -> or_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 97: // expr -> add_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 98: // expr -> sub_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 99: // expr -> mult_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 100: // expr -> like_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 101: // expr -> ilike_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 102: // expr -> simple_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 103: // expr -> group_paren_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 104: // expr -> fcall_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 105: // expr -> projection_all
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 106: // expr -> use_default_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 107: // and_expr -> condition, TAND, condition
{ CurrentSemanticValue.n = new(NodeType.ExprAnd, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 108: // or_expr -> condition, TOR, condition
{ CurrentSemanticValue.n = new(NodeType.ExprOr, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 109: // equals_expr -> condition, TEQUALS, condition
{ CurrentSemanticValue.n = new(NodeType.ExprEquals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 110: // not_equals_expr -> condition, TNOTEQUALS, condition
{ CurrentSemanticValue.n = new(NodeType.ExprNotEquals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 111: // less_than_expr -> condition, TLESSTHAN, condition
{ CurrentSemanticValue.n = new(NodeType.ExprLessThan, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 112: // greater_than_expr -> condition, TGREATERTHAN, condition
{ CurrentSemanticValue.n = new(NodeType.ExprGreaterThan, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 113: // greater_equals_than_expr -> condition, TGREATERTHANEQUALS, condition
{ CurrentSemanticValue.n = new(NodeType.ExprGreaterEqualsThan, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 114: // less_equals_than_expr -> condition, TLESSTHANEQUALS, condition
{ CurrentSemanticValue.n = new(NodeType.ExprLessEqualsThan, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 115: // add_expr -> condition, TADD, condition
{ CurrentSemanticValue.n = new(NodeType.ExprAdd, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 116: // sub_expr -> condition, TMINUS, condition
{ CurrentSemanticValue.n = new(NodeType.ExprSub, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 117: // mult_expr -> condition, TMULT, condition
{ CurrentSemanticValue.n = new(NodeType.ExprMult, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 118: // like_expr -> condition, TLIKE, condition
{ CurrentSemanticValue.n = new(NodeType.ExprLike, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 119: // ilike_expr -> condition, TILIKE, condition
{ CurrentSemanticValue.n = new(NodeType.ExprILike, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 120: // fcall_expr -> identifier, LPAREN, RPAREN
{ CurrentSemanticValue.n = new(NodeType.ExprFuncCall, ValueStack[ValueStack.Depth-3].n, null, null, null, null, null, null); }
        break;
      case 121: // fcall_expr -> identifier, LPAREN, fcall_argument_list, RPAREN
{ CurrentSemanticValue.n = new(NodeType.ExprFuncCall, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null); }
        break;
      case 122: // fcall_argument_list -> fcall_argument_list, TCOMMA, fcall_argument_item
{ CurrentSemanticValue.n = new(NodeType.ExprArgumentList, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 123: // fcall_argument_list -> fcall_argument_item
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 124: // fcall_argument_item -> expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 125: // group_paren_expr -> LPAREN, condition, RPAREN
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-2].s; }
        break;
      case 126: // simple_expr -> any_identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 127: // simple_expr -> number
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 128: // simple_expr -> string
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 129: // simple_expr -> bool
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 130: // simple_expr -> null
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 131: // simple_expr -> placeholder
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 132: // use_default_expr -> TDEFAULT
{ CurrentSemanticValue.n = new(NodeType.ExprDefault, null, null, null, null, null, null, null); }
        break;
      case 133: // projection_all -> TMULT
{ CurrentSemanticValue.n = new(NodeType.ExprAllFields, null, null, null, null, null, null, null); }
        break;
      case 134: // any_identifier -> identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 135: // any_identifier -> escaped_identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 136: // identifier -> TIDENTIFIER
{ CurrentSemanticValue.n = new(NodeType.Identifier, null, null, null, null, null, null, CurrentSemanticValue.s); }
        break;
      case 137: // escaped_identifier -> TESCAPED_IDENTIFIER
{ CurrentSemanticValue.n = new(NodeType.Identifier, null, null, null, null, null, null, CurrentSemanticValue.s.Trim('`')); }
        break;
      case 138: // number -> TDIGIT
{ CurrentSemanticValue.n = new(NodeType.Number, null, null, null, null, null, null, CurrentSemanticValue.s); }
        break;
      case 139: // string -> TSTRING
{ CurrentSemanticValue.n = new(NodeType.String, null, null, null, null, null, null, CurrentSemanticValue.s); }
        break;
      case 140: // bool -> TTRUE
{ CurrentSemanticValue.n = new(NodeType.Bool, null, null, null, null, null, null, "true"); }
        break;
      case 141: // bool -> TFALSE
{ CurrentSemanticValue.n = new(NodeType.Bool, null, null, null, null, null, null, "false"); }
        break;
      case 142: // null -> TNULL
{ CurrentSemanticValue.n = new(NodeType.Null, null, null, null, null, null, null, "null"); }
        break;
      case 143: // placeholder -> TPLACEHOLDER
{ CurrentSemanticValue.n = new(NodeType.Placeholder, null, null, null, null, null, null, CurrentSemanticValue.s); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
