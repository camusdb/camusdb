// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// DateTime: 1/22/2024 3:31:42 PM
// Input file <SQLParser/SQLParser.Language.grammar.y - 1/22/2024 3:28:53 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace CamusDB.Core.SQLParser
{
internal enum Token {error=2,EOF=3,TOR=4,TAND=5,TLIKE=6,
    TILIKE=7,TEQUALS=8,TNOTEQUALS=9,TLESSTHAN=10,TGREATERTHAN=11,TLESSTHANEQUALS=12,
    TGREATERTHANEQUALS=13,TADD=14,TMINUS=15,TMULT=16,TDIGIT=17,TSTRING=18,
    TIDENTIFIER=19,TPLACEHOLDER=20,LPAREN=21,RPAREN=22,TCOMMA=23,TDIV=24,
    TSELECT=25,TFROM=26,TWHERE=27,TORDER=28,TBY=29,TASC=30,
    TDESC=31,TTRUE=32,TFALSE=33,TUPDATE=34,TSET=35,TDELETE=36,
    TINSERT=37,TINTO=38,TVALUES=39,TCREATE=40,TTABLE=41,TNOT=42,
    TNULL=43,TTYPE_STRING=44,TTYPE_INT64=45,TTYPE_FLOAT64=46,TTYPE_OBJECT_ID=47,TTYPE_BOOL=48,
    TPRIMARY=49,TKEY=50,TUNIQUE=51,TINDEX=52,TALTER=53,TWADD=54,
    TDROP=55,TCOLUMN=56,TESCAPED_IDENTIFIER=57,TLIMIT=58,TOFFSET=59,TAS=60,
    TGROUP=61,TSHOW=62,TCOLUMNS=63,TTABLES=64,TDESCRIBE=65,TDATABASE=66,
    TAT=67,LBRACE=68,RBRACE=69,TINDEXES=70,TDEFAULT=71,TIF=72,
    TEXISTS=73,TON=74,TIN=75,TIS=76};

internal partial struct ValueType
{ 
        public NodeAst n;
        public string s;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class sqlParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[165];
  private static State[] states = new State[323];
  private static string[] nonTerms = new string[] {
      "list", "$accept", "stat", "select_stmt", "update_stmt", "delete_stmt", 
      "insert_stmt", "create_table_stmt", "drop_table_stmt", "alter_table_stmt", 
      "show_stmt", "create_index_stmt", "select_field_list", "select_table", 
      "condition", "order_list", "select_limit_offset", "any_identifier", "insert_field_list", 
      "values_list", "update_list", "create_table_item_list", "create_table_constraint_list", 
      "field_type", "create_table_field_constraint", "identifier_index_list", 
      "identifier_index", "identifier", "create_table_item", "create_table_field_constraint_list", 
      "default_expr", "number", "string", "bool", "null", "update_item", "expr", 
      "select_field_item", "placeholder", "insert_field_item", "values_item", 
      "order_item", "equals_expr", "not_equals_expr", "less_than_expr", "greater_than_expr", 
      "less_equals_than_expr", "greater_equals_than_expr", "and_expr", "or_expr", 
      "add_expr", "sub_expr", "mult_expr", "like_expr", "ilike_expr", "simple_expr", 
      "group_paren_expr", "fcall_expr", "projection_all", "use_default_expr", 
      "is_null_expr", "is_not_null_expr", "fcall_argument_list", "fcall_argument_item", 
      "escaped_identifier", };

  static sqlParser() {
    states[0] = new State(new int[]{25,5,34,137,36,150,37,156,40,179,55,248,53,252,62,303,65,318,31,320},new int[]{-1,1,-3,3,-4,4,-5,136,-6,149,-7,155,-8,178,-9,247,-10,251,-11,302,-12,322});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-3);
    states[5] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-13,6,-38,135,-37,132,-43,67,-15,90,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[6] = new State(new int[]{26,7,23,130});
    states[7] = new State(new int[]{19,28,57,30},new int[]{-14,8,-18,123,-28,27,-65,29});
    states[8] = new State(new int[]{27,9,28,112,58,119,3,-12});
    states[9] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-15,10,-37,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[10] = new State(new int[]{28,11,58,32,8,36,9,38,10,40,11,42,12,44,13,46,5,48,4,50,14,52,15,54,16,56,6,58,7,60,76,62,3,-13});
    states[11] = new State(new int[]{29,12});
    states[12] = new State(new int[]{19,28,57,30},new int[]{-16,13,-42,31,-18,24,-28,27,-65,29});
    states[13] = new State(new int[]{58,14,23,22,3,-15});
    states[14] = new State(new int[]{17,19,20,21},new int[]{-17,15,-32,18,-39,20});
    states[15] = new State(new int[]{59,16,3,-21});
    states[16] = new State(new int[]{17,19,20,21},new int[]{-17,17,-32,18,-39,20});
    states[17] = new State(-23);
    states[18] = new State(-92);
    states[19] = new State(-159);
    states[20] = new State(-93);
    states[21] = new State(-164);
    states[22] = new State(new int[]{19,28,57,30},new int[]{-42,23,-18,24,-28,27,-65,29});
    states[23] = new State(-100);
    states[24] = new State(new int[]{30,25,31,26,58,-102,23,-102,3,-102});
    states[25] = new State(-103);
    states[26] = new State(-104);
    states[27] = new State(-155);
    states[28] = new State(-157);
    states[29] = new State(-156);
    states[30] = new State(-158);
    states[31] = new State(-101);
    states[32] = new State(new int[]{17,19,20,21},new int[]{-17,33,-32,18,-39,20});
    states[33] = new State(new int[]{59,34,3,-18});
    states[34] = new State(new int[]{17,19,20,21},new int[]{-17,35,-32,18,-39,20});
    states[35] = new State(-19);
    states[36] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-15,37,-37,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[37] = new State(new int[]{8,-128,9,-128,10,40,11,42,12,44,13,46,5,-128,4,-128,14,52,15,54,16,56,6,-128,7,-128,76,62,60,-128,26,-128,23,-128,28,-128,58,-128,3,-128,22,-128,27,-128});
    states[38] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-15,39,-37,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[39] = new State(new int[]{8,-129,9,-129,10,40,11,42,12,44,13,46,5,-129,4,-129,14,52,15,54,16,56,6,-129,7,-129,76,62,60,-129,26,-129,23,-129,28,-129,58,-129,3,-129,22,-129,27,-129});
    states[40] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-15,41,-37,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[41] = new State(new int[]{8,-130,9,-130,10,-130,11,-130,12,-130,13,-130,5,-130,4,-130,14,52,15,54,16,56,6,-130,7,-130,76,62,60,-130,26,-130,23,-130,28,-130,58,-130,3,-130,22,-130,27,-130});
    states[42] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-15,43,-37,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[43] = new State(new int[]{8,-131,9,-131,10,-131,11,-131,12,-131,13,-131,5,-131,4,-131,14,52,15,54,16,56,6,-131,7,-131,76,62,60,-131,26,-131,23,-131,28,-131,58,-131,3,-131,22,-131,27,-131});
    states[44] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-15,45,-37,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[45] = new State(new int[]{8,-133,9,-133,10,-133,11,-133,12,-133,13,-133,5,-133,4,-133,14,52,15,54,16,56,6,-133,7,-133,76,62,60,-133,26,-133,23,-133,28,-133,58,-133,3,-133,22,-133,27,-133});
    states[46] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-15,47,-37,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[47] = new State(new int[]{8,-132,9,-132,10,-132,11,-132,12,-132,13,-132,5,-132,4,-132,14,52,15,54,16,56,6,-132,7,-132,76,62,60,-132,26,-132,23,-132,28,-132,58,-132,3,-132,22,-132,27,-132});
    states[48] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-15,49,-37,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[49] = new State(new int[]{8,36,9,38,10,40,11,42,12,44,13,46,5,-126,4,-126,14,52,15,54,16,56,6,58,7,60,76,62,60,-126,26,-126,23,-126,28,-126,58,-126,3,-126,22,-126,27,-126});
    states[50] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-15,51,-37,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[51] = new State(new int[]{8,36,9,38,10,40,11,42,12,44,13,46,5,48,4,-127,14,52,15,54,16,56,6,58,7,60,76,62,60,-127,26,-127,23,-127,28,-127,58,-127,3,-127,22,-127,27,-127});
    states[52] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-15,53,-37,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[53] = new State(new int[]{8,-134,9,-134,10,-134,11,-134,12,-134,13,-134,5,-134,4,-134,14,-134,15,-134,16,56,6,-134,7,-134,76,62,60,-134,26,-134,23,-134,28,-134,58,-134,3,-134,22,-134,27,-134});
    states[54] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-15,55,-37,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[55] = new State(new int[]{8,-135,9,-135,10,-135,11,-135,12,-135,13,-135,5,-135,4,-135,14,-135,15,-135,16,56,6,-135,7,-135,76,62,60,-135,26,-135,23,-135,28,-135,58,-135,3,-135,22,-135,27,-135});
    states[56] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-15,57,-37,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[57] = new State(new int[]{8,-136,9,-136,10,-136,11,-136,12,-136,13,-136,5,-136,4,-136,14,-136,15,-136,16,-136,6,-136,7,-136,76,62,60,-136,26,-136,23,-136,28,-136,58,-136,3,-136,22,-136,27,-136});
    states[58] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-15,59,-37,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[59] = new State(new int[]{8,36,9,38,10,40,11,42,12,44,13,46,5,-137,4,-137,14,52,15,54,16,56,6,-137,7,-137,76,62,60,-137,26,-137,23,-137,28,-137,58,-137,3,-137,22,-137,27,-137});
    states[60] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-15,61,-37,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[61] = new State(new int[]{8,36,9,38,10,40,11,42,12,44,13,46,5,-138,4,-138,14,52,15,54,16,56,6,-138,7,-138,76,62,60,-138,26,-138,23,-138,28,-138,58,-138,3,-138,22,-138,27,-138});
    states[62] = new State(new int[]{43,63,42,64});
    states[63] = new State(-139);
    states[64] = new State(new int[]{43,65});
    states[65] = new State(-140);
    states[66] = new State(-105);
    states[67] = new State(-106);
    states[68] = new State(-107);
    states[69] = new State(-108);
    states[70] = new State(-109);
    states[71] = new State(-110);
    states[72] = new State(-111);
    states[73] = new State(-112);
    states[74] = new State(-113);
    states[75] = new State(-114);
    states[76] = new State(-115);
    states[77] = new State(-116);
    states[78] = new State(-117);
    states[79] = new State(-118);
    states[80] = new State(-119);
    states[81] = new State(-147);
    states[82] = new State(new int[]{21,83,60,-155,26,-155,23,-155,8,-155,9,-155,10,-155,11,-155,12,-155,13,-155,5,-155,4,-155,14,-155,15,-155,16,-155,6,-155,7,-155,76,-155,28,-155,58,-155,3,-155,22,-155,27,-155});
    states[83] = new State(new int[]{22,84,19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-63,85,-64,111,-37,89,-43,67,-15,90,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[84] = new State(-141);
    states[85] = new State(new int[]{22,86,23,87});
    states[86] = new State(-142);
    states[87] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-64,88,-37,89,-43,67,-15,90,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[88] = new State(-143);
    states[89] = new State(new int[]{22,-145,23,-145,8,-105,9,-105,10,-105,11,-105,12,-105,13,-105,5,-105,4,-105,14,-105,15,-105,16,-105,6,-105,7,-105,76,-105});
    states[90] = new State(new int[]{8,36,9,38,10,40,11,42,12,44,13,46,5,48,4,50,14,52,15,54,16,56,6,58,7,60,76,62});
    states[91] = new State(-148);
    states[92] = new State(-149);
    states[93] = new State(-160);
    states[94] = new State(-150);
    states[95] = new State(-161);
    states[96] = new State(-162);
    states[97] = new State(-151);
    states[98] = new State(-163);
    states[99] = new State(-152);
    states[100] = new State(-120);
    states[101] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-15,102,-37,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[102] = new State(new int[]{22,103,8,36,9,38,10,40,11,42,12,44,13,46,5,48,4,50,14,52,15,54,16,56,6,58,7,60,76,62});
    states[103] = new State(-146);
    states[104] = new State(-121);
    states[105] = new State(-122);
    states[106] = new State(-154);
    states[107] = new State(-123);
    states[108] = new State(-153);
    states[109] = new State(-124);
    states[110] = new State(-125);
    states[111] = new State(-144);
    states[112] = new State(new int[]{29,113});
    states[113] = new State(new int[]{19,28,57,30},new int[]{-16,114,-42,31,-18,24,-28,27,-65,29});
    states[114] = new State(new int[]{58,115,23,22,3,-14});
    states[115] = new State(new int[]{17,19,20,21},new int[]{-17,116,-32,18,-39,20});
    states[116] = new State(new int[]{59,117,3,-20});
    states[117] = new State(new int[]{17,19,20,21},new int[]{-17,118,-32,18,-39,20});
    states[118] = new State(-22);
    states[119] = new State(new int[]{17,19,20,21},new int[]{-17,120,-32,18,-39,20});
    states[120] = new State(new int[]{59,121,3,-16});
    states[121] = new State(new int[]{17,19,20,21},new int[]{-17,122,-32,18,-39,20});
    states[122] = new State(-17);
    states[123] = new State(new int[]{67,124,27,-62,28,-62,58,-62,3,-62});
    states[124] = new State(new int[]{68,125});
    states[125] = new State(new int[]{19,28},new int[]{-28,126});
    states[126] = new State(new int[]{8,127});
    states[127] = new State(new int[]{19,28},new int[]{-28,128});
    states[128] = new State(new int[]{69,129});
    states[129] = new State(-63);
    states[130] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-38,131,-37,132,-43,67,-15,90,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[131] = new State(-88);
    states[132] = new State(new int[]{60,133,26,-90,23,-90,8,-105,9,-105,10,-105,11,-105,12,-105,13,-105,5,-105,4,-105,14,-105,15,-105,16,-105,6,-105,7,-105,76,-105});
    states[133] = new State(new int[]{19,28,57,30},new int[]{-18,134,-28,27,-65,29});
    states[134] = new State(-91);
    states[135] = new State(-89);
    states[136] = new State(-4);
    states[137] = new State(new int[]{19,28,57,30},new int[]{-18,138,-28,27,-65,29});
    states[138] = new State(new int[]{35,139});
    states[139] = new State(new int[]{19,28,57,30},new int[]{-21,140,-36,148,-18,145,-28,27,-65,29});
    states[140] = new State(new int[]{27,141,23,143});
    states[141] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-15,142,-37,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[142] = new State(new int[]{8,36,9,38,10,40,11,42,12,44,13,46,5,48,4,50,14,52,15,54,16,56,6,58,7,60,76,62,3,-26});
    states[143] = new State(new int[]{19,28,57,30},new int[]{-36,144,-18,145,-28,27,-65,29});
    states[144] = new State(-85);
    states[145] = new State(new int[]{8,146});
    states[146] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-37,147,-43,67,-15,90,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[147] = new State(new int[]{27,-87,23,-87,8,-105,9,-105,10,-105,11,-105,12,-105,13,-105,5,-105,4,-105,14,-105,15,-105,16,-105,6,-105,7,-105,76,-105});
    states[148] = new State(-86);
    states[149] = new State(-5);
    states[150] = new State(new int[]{26,151});
    states[151] = new State(new int[]{19,28,57,30},new int[]{-18,152,-28,27,-65,29});
    states[152] = new State(new int[]{27,153});
    states[153] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-15,154,-37,66,-43,67,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[154] = new State(new int[]{8,36,9,38,10,40,11,42,12,44,13,46,5,48,4,50,14,52,15,54,16,56,6,58,7,60,76,62,3,-27});
    states[155] = new State(-6);
    states[156] = new State(new int[]{38,157});
    states[157] = new State(new int[]{19,28,57,30},new int[]{-18,158,-28,27,-65,29});
    states[158] = new State(new int[]{21,159,39,174});
    states[159] = new State(new int[]{19,28,57,30},new int[]{-19,160,-40,173,-18,172,-28,27,-65,29});
    states[160] = new State(new int[]{22,161,23,170});
    states[161] = new State(new int[]{39,162});
    states[162] = new State(new int[]{21,163});
    states[163] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-20,164,-41,169,-37,168,-43,67,-15,90,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[164] = new State(new int[]{22,165,23,166});
    states[165] = new State(-24);
    states[166] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-41,167,-37,168,-43,67,-15,90,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[167] = new State(-97);
    states[168] = new State(new int[]{22,-99,23,-99,8,-105,9,-105,10,-105,11,-105,12,-105,13,-105,5,-105,4,-105,14,-105,15,-105,16,-105,6,-105,7,-105,76,-105});
    states[169] = new State(-98);
    states[170] = new State(new int[]{19,28,57,30},new int[]{-40,171,-18,172,-28,27,-65,29});
    states[171] = new State(-94);
    states[172] = new State(-96);
    states[173] = new State(-95);
    states[174] = new State(new int[]{21,175});
    states[175] = new State(new int[]{19,28,57,30,17,19,18,93,32,95,33,96,43,98,20,21,21,101,16,106,71,108},new int[]{-20,176,-41,169,-37,168,-43,67,-15,90,-44,68,-45,69,-46,70,-47,71,-48,72,-49,73,-50,74,-51,75,-52,76,-53,77,-54,78,-55,79,-56,80,-18,81,-28,82,-65,29,-32,91,-33,92,-34,94,-35,97,-39,99,-57,100,-58,104,-59,105,-60,107,-61,109,-62,110});
    states[176] = new State(new int[]{22,177,23,166});
    states[177] = new State(-25);
    states[178] = new State(-7);
    states[179] = new State(new int[]{41,180,52,232,51,239});
    states[180] = new State(new int[]{72,224,19,28,57,30},new int[]{-18,181,-28,27,-65,29});
    states[181] = new State(new int[]{21,182});
    states[182] = new State(new int[]{19,28,57,30},new int[]{-22,183,-29,223,-18,199,-28,27,-65,29});
    states[183] = new State(new int[]{22,184,23,197});
    states[184] = new State(new int[]{49,186,3,-28},new int[]{-23,185});
    states[185] = new State(-30);
    states[186] = new State(new int[]{50,187});
    states[187] = new State(new int[]{21,188});
    states[188] = new State(new int[]{19,28,57,30},new int[]{-26,189,-27,196,-18,193,-28,27,-65,29});
    states[189] = new State(new int[]{22,190,23,191});
    states[190] = new State(-68);
    states[191] = new State(new int[]{19,28,57,30},new int[]{-27,192,-18,193,-28,27,-65,29});
    states[192] = new State(-57);
    states[193] = new State(new int[]{30,194,31,195,22,-59,23,-59});
    states[194] = new State(-60);
    states[195] = new State(-61);
    states[196] = new State(-58);
    states[197] = new State(new int[]{19,28,57,30},new int[]{-29,198,-18,199,-28,27,-65,29});
    states[198] = new State(-64);
    states[199] = new State(new int[]{47,218,44,219,45,220,46,221,48,222},new int[]{-24,200});
    states[200] = new State(new int[]{43,203,42,204,49,206,51,208,71,209,22,-66,23,-66},new int[]{-30,201,-25,217});
    states[201] = new State(new int[]{43,203,42,204,49,206,51,208,71,209,22,-67,23,-67},new int[]{-25,202});
    states[202] = new State(-69);
    states[203] = new State(-71);
    states[204] = new State(new int[]{43,205});
    states[205] = new State(-72);
    states[206] = new State(new int[]{50,207});
    states[207] = new State(-73);
    states[208] = new State(-74);
    states[209] = new State(new int[]{21,210});
    states[210] = new State(new int[]{17,19,18,93,32,95,33,96,43,98},new int[]{-31,211,-32,213,-33,214,-34,215,-35,216});
    states[211] = new State(new int[]{22,212});
    states[212] = new State(-75);
    states[213] = new State(-76);
    states[214] = new State(-77);
    states[215] = new State(-78);
    states[216] = new State(-79);
    states[217] = new State(-70);
    states[218] = new State(-80);
    states[219] = new State(-81);
    states[220] = new State(-82);
    states[221] = new State(-83);
    states[222] = new State(-84);
    states[223] = new State(-65);
    states[224] = new State(new int[]{42,225});
    states[225] = new State(new int[]{73,226});
    states[226] = new State(new int[]{19,28,57,30},new int[]{-18,227,-28,27,-65,29});
    states[227] = new State(new int[]{21,228});
    states[228] = new State(new int[]{19,28,57,30},new int[]{-22,229,-29,223,-18,199,-28,27,-65,29});
    states[229] = new State(new int[]{22,230,23,197});
    states[230] = new State(new int[]{49,186,3,-29},new int[]{-23,231});
    states[231] = new State(-31);
    states[232] = new State(new int[]{19,28,57,30},new int[]{-18,233,-28,27,-65,29});
    states[233] = new State(new int[]{74,234});
    states[234] = new State(new int[]{19,28,57,30},new int[]{-18,235,-28,27,-65,29});
    states[235] = new State(new int[]{21,236});
    states[236] = new State(new int[]{19,28,57,30},new int[]{-26,237,-27,196,-18,193,-28,27,-65,29});
    states[237] = new State(new int[]{22,238,23,191});
    states[238] = new State(-47);
    states[239] = new State(new int[]{52,240});
    states[240] = new State(new int[]{19,28,57,30},new int[]{-18,241,-28,27,-65,29});
    states[241] = new State(new int[]{74,242});
    states[242] = new State(new int[]{19,28,57,30},new int[]{-18,243,-28,27,-65,29});
    states[243] = new State(new int[]{21,244});
    states[244] = new State(new int[]{19,28,57,30},new int[]{-26,245,-27,196,-18,193,-28,27,-65,29});
    states[245] = new State(new int[]{22,246,23,191});
    states[246] = new State(-48);
    states[247] = new State(-8);
    states[248] = new State(new int[]{41,249});
    states[249] = new State(new int[]{19,28,57,30},new int[]{-18,250,-28,27,-65,29});
    states[250] = new State(-32);
    states[251] = new State(-9);
    states[252] = new State(new int[]{41,253});
    states[253] = new State(new int[]{19,28,57,30},new int[]{-18,254,-28,27,-65,29});
    states[254] = new State(new int[]{54,255,55,294});
    states[255] = new State(new int[]{56,258,52,262,51,271,49,289,19,28,57,30},new int[]{-18,256,-28,27,-65,29});
    states[256] = new State(new int[]{47,218,44,219,45,220,46,221,48,222},new int[]{-24,257});
    states[257] = new State(-33);
    states[258] = new State(new int[]{19,28,57,30},new int[]{-18,259,-28,27,-65,29});
    states[259] = new State(new int[]{47,218,44,219,45,220,46,221,48,222},new int[]{-24,260});
    states[260] = new State(new int[]{43,203,42,204,49,206,51,208,71,209,3,-34},new int[]{-25,261});
    states[261] = new State(-35);
    states[262] = new State(new int[]{19,28,57,30},new int[]{-18,263,-28,27,-65,29});
    states[263] = new State(new int[]{21,264,74,267});
    states[264] = new State(new int[]{19,28,57,30},new int[]{-26,265,-27,196,-18,193,-28,27,-65,29});
    states[265] = new State(new int[]{22,266,23,191});
    states[266] = new State(-38);
    states[267] = new State(new int[]{21,268});
    states[268] = new State(new int[]{19,28,57,30},new int[]{-26,269,-27,196,-18,193,-28,27,-65,29});
    states[269] = new State(new int[]{22,270,23,191});
    states[270] = new State(-39);
    states[271] = new State(new int[]{52,280,19,28,57,30},new int[]{-18,272,-28,27,-65,29});
    states[272] = new State(new int[]{21,273,74,276});
    states[273] = new State(new int[]{19,28,57,30},new int[]{-26,274,-27,196,-18,193,-28,27,-65,29});
    states[274] = new State(new int[]{22,275,23,191});
    states[275] = new State(-40);
    states[276] = new State(new int[]{21,277});
    states[277] = new State(new int[]{19,28,57,30},new int[]{-26,278,-27,196,-18,193,-28,27,-65,29});
    states[278] = new State(new int[]{22,279,23,191});
    states[279] = new State(-41);
    states[280] = new State(new int[]{19,28,57,30},new int[]{-18,281,-28,27,-65,29});
    states[281] = new State(new int[]{21,282,74,285});
    states[282] = new State(new int[]{19,28,57,30},new int[]{-26,283,-27,196,-18,193,-28,27,-65,29});
    states[283] = new State(new int[]{22,284,23,191});
    states[284] = new State(-42);
    states[285] = new State(new int[]{21,286});
    states[286] = new State(new int[]{19,28,57,30},new int[]{-26,287,-27,196,-18,193,-28,27,-65,29});
    states[287] = new State(new int[]{22,288,23,191});
    states[288] = new State(-43);
    states[289] = new State(new int[]{50,290});
    states[290] = new State(new int[]{21,291});
    states[291] = new State(new int[]{19,28,57,30},new int[]{-26,292,-27,196,-18,193,-28,27,-65,29});
    states[292] = new State(new int[]{22,293,23,191});
    states[293] = new State(-45);
    states[294] = new State(new int[]{56,296,52,298,49,300,19,28,57,30},new int[]{-18,295,-28,27,-65,29});
    states[295] = new State(-36);
    states[296] = new State(new int[]{19,28,57,30},new int[]{-18,297,-28,27,-65,29});
    states[297] = new State(-37);
    states[298] = new State(new int[]{19,28,57,30},new int[]{-18,299,-28,27,-65,29});
    states[299] = new State(-44);
    states[300] = new State(new int[]{50,301});
    states[301] = new State(-46);
    states[302] = new State(-10);
    states[303] = new State(new int[]{63,304,64,307,40,308,66,311,70,312,52,315});
    states[304] = new State(new int[]{26,305});
    states[305] = new State(new int[]{19,28,57,30},new int[]{-18,306,-28,27,-65,29});
    states[306] = new State(-49);
    states[307] = new State(-50);
    states[308] = new State(new int[]{41,309});
    states[309] = new State(new int[]{19,28,57,30},new int[]{-18,310,-28,27,-65,29});
    states[310] = new State(-53);
    states[311] = new State(-54);
    states[312] = new State(new int[]{26,313});
    states[313] = new State(new int[]{19,28,57,30},new int[]{-18,314,-28,27,-65,29});
    states[314] = new State(-55);
    states[315] = new State(new int[]{26,316});
    states[316] = new State(new int[]{19,28,57,30},new int[]{-18,317,-28,27,-65,29});
    states[317] = new State(-56);
    states[318] = new State(new int[]{19,28,57,30},new int[]{-18,319,-28,27,-65,29});
    states[319] = new State(-51);
    states[320] = new State(new int[]{19,28,57,30},new int[]{-18,321,-28,27,-65,29});
    states[321] = new State(-52);
    states[322] = new State(-11);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{-4});
    rules[4] = new Rule(-3, new int[]{-5});
    rules[5] = new Rule(-3, new int[]{-6});
    rules[6] = new Rule(-3, new int[]{-7});
    rules[7] = new Rule(-3, new int[]{-8});
    rules[8] = new Rule(-3, new int[]{-9});
    rules[9] = new Rule(-3, new int[]{-10});
    rules[10] = new Rule(-3, new int[]{-11});
    rules[11] = new Rule(-3, new int[]{-12});
    rules[12] = new Rule(-4, new int[]{25,-13,26,-14});
    rules[13] = new Rule(-4, new int[]{25,-13,26,-14,27,-15});
    rules[14] = new Rule(-4, new int[]{25,-13,26,-14,28,29,-16});
    rules[15] = new Rule(-4, new int[]{25,-13,26,-14,27,-15,28,29,-16});
    rules[16] = new Rule(-4, new int[]{25,-13,26,-14,58,-17});
    rules[17] = new Rule(-4, new int[]{25,-13,26,-14,58,-17,59,-17});
    rules[18] = new Rule(-4, new int[]{25,-13,26,-14,27,-15,58,-17});
    rules[19] = new Rule(-4, new int[]{25,-13,26,-14,27,-15,58,-17,59,-17});
    rules[20] = new Rule(-4, new int[]{25,-13,26,-14,28,29,-16,58,-17});
    rules[21] = new Rule(-4, new int[]{25,-13,26,-14,27,-15,28,29,-16,58,-17});
    rules[22] = new Rule(-4, new int[]{25,-13,26,-14,28,29,-16,58,-17,59,-17});
    rules[23] = new Rule(-4, new int[]{25,-13,26,-14,27,-15,28,29,-16,58,-17,59,-17});
    rules[24] = new Rule(-7, new int[]{37,38,-18,21,-19,22,39,21,-20,22});
    rules[25] = new Rule(-7, new int[]{37,38,-18,39,21,-20,22});
    rules[26] = new Rule(-5, new int[]{34,-18,35,-21,27,-15});
    rules[27] = new Rule(-6, new int[]{36,26,-18,27,-15});
    rules[28] = new Rule(-8, new int[]{40,41,-18,21,-22,22});
    rules[29] = new Rule(-8, new int[]{40,41,72,42,73,-18,21,-22,22});
    rules[30] = new Rule(-8, new int[]{40,41,-18,21,-22,22,-23});
    rules[31] = new Rule(-8, new int[]{40,41,72,42,73,-18,21,-22,22,-23});
    rules[32] = new Rule(-9, new int[]{55,41,-18});
    rules[33] = new Rule(-10, new int[]{53,41,-18,54,-18,-24});
    rules[34] = new Rule(-10, new int[]{53,41,-18,54,56,-18,-24});
    rules[35] = new Rule(-10, new int[]{53,41,-18,54,56,-18,-24,-25});
    rules[36] = new Rule(-10, new int[]{53,41,-18,55,-18});
    rules[37] = new Rule(-10, new int[]{53,41,-18,55,56,-18});
    rules[38] = new Rule(-10, new int[]{53,41,-18,54,52,-18,21,-26,22});
    rules[39] = new Rule(-10, new int[]{53,41,-18,54,52,-18,74,21,-26,22});
    rules[40] = new Rule(-10, new int[]{53,41,-18,54,51,-18,21,-26,22});
    rules[41] = new Rule(-10, new int[]{53,41,-18,54,51,-18,74,21,-26,22});
    rules[42] = new Rule(-10, new int[]{53,41,-18,54,51,52,-18,21,-26,22});
    rules[43] = new Rule(-10, new int[]{53,41,-18,54,51,52,-18,74,21,-26,22});
    rules[44] = new Rule(-10, new int[]{53,41,-18,55,52,-18});
    rules[45] = new Rule(-10, new int[]{53,41,-18,54,49,50,21,-26,22});
    rules[46] = new Rule(-10, new int[]{53,41,-18,55,49,50});
    rules[47] = new Rule(-12, new int[]{40,52,-18,74,-18,21,-26,22});
    rules[48] = new Rule(-12, new int[]{40,51,52,-18,74,-18,21,-26,22});
    rules[49] = new Rule(-11, new int[]{62,63,26,-18});
    rules[50] = new Rule(-11, new int[]{62,64});
    rules[51] = new Rule(-11, new int[]{65,-18});
    rules[52] = new Rule(-11, new int[]{31,-18});
    rules[53] = new Rule(-11, new int[]{62,40,41,-18});
    rules[54] = new Rule(-11, new int[]{62,66});
    rules[55] = new Rule(-11, new int[]{62,70,26,-18});
    rules[56] = new Rule(-11, new int[]{62,52,26,-18});
    rules[57] = new Rule(-26, new int[]{-26,23,-27});
    rules[58] = new Rule(-26, new int[]{-27});
    rules[59] = new Rule(-27, new int[]{-18});
    rules[60] = new Rule(-27, new int[]{-18,30});
    rules[61] = new Rule(-27, new int[]{-18,31});
    rules[62] = new Rule(-14, new int[]{-18});
    rules[63] = new Rule(-14, new int[]{-18,67,68,-28,8,-28,69});
    rules[64] = new Rule(-22, new int[]{-22,23,-29});
    rules[65] = new Rule(-22, new int[]{-29});
    rules[66] = new Rule(-29, new int[]{-18,-24});
    rules[67] = new Rule(-29, new int[]{-18,-24,-30});
    rules[68] = new Rule(-23, new int[]{49,50,21,-26,22});
    rules[69] = new Rule(-30, new int[]{-30,-25});
    rules[70] = new Rule(-30, new int[]{-25});
    rules[71] = new Rule(-25, new int[]{43});
    rules[72] = new Rule(-25, new int[]{42,43});
    rules[73] = new Rule(-25, new int[]{49,50});
    rules[74] = new Rule(-25, new int[]{51});
    rules[75] = new Rule(-25, new int[]{71,21,-31,22});
    rules[76] = new Rule(-31, new int[]{-32});
    rules[77] = new Rule(-31, new int[]{-33});
    rules[78] = new Rule(-31, new int[]{-34});
    rules[79] = new Rule(-31, new int[]{-35});
    rules[80] = new Rule(-24, new int[]{47});
    rules[81] = new Rule(-24, new int[]{44});
    rules[82] = new Rule(-24, new int[]{45});
    rules[83] = new Rule(-24, new int[]{46});
    rules[84] = new Rule(-24, new int[]{48});
    rules[85] = new Rule(-21, new int[]{-21,23,-36});
    rules[86] = new Rule(-21, new int[]{-36});
    rules[87] = new Rule(-36, new int[]{-18,8,-37});
    rules[88] = new Rule(-13, new int[]{-13,23,-38});
    rules[89] = new Rule(-13, new int[]{-38});
    rules[90] = new Rule(-38, new int[]{-37});
    rules[91] = new Rule(-38, new int[]{-37,60,-18});
    rules[92] = new Rule(-17, new int[]{-32});
    rules[93] = new Rule(-17, new int[]{-39});
    rules[94] = new Rule(-19, new int[]{-19,23,-40});
    rules[95] = new Rule(-19, new int[]{-40});
    rules[96] = new Rule(-40, new int[]{-18});
    rules[97] = new Rule(-20, new int[]{-20,23,-41});
    rules[98] = new Rule(-20, new int[]{-41});
    rules[99] = new Rule(-41, new int[]{-37});
    rules[100] = new Rule(-16, new int[]{-16,23,-42});
    rules[101] = new Rule(-16, new int[]{-42});
    rules[102] = new Rule(-42, new int[]{-18});
    rules[103] = new Rule(-42, new int[]{-18,30});
    rules[104] = new Rule(-42, new int[]{-18,31});
    rules[105] = new Rule(-15, new int[]{-37});
    rules[106] = new Rule(-37, new int[]{-43});
    rules[107] = new Rule(-37, new int[]{-44});
    rules[108] = new Rule(-37, new int[]{-45});
    rules[109] = new Rule(-37, new int[]{-46});
    rules[110] = new Rule(-37, new int[]{-47});
    rules[111] = new Rule(-37, new int[]{-48});
    rules[112] = new Rule(-37, new int[]{-49});
    rules[113] = new Rule(-37, new int[]{-50});
    rules[114] = new Rule(-37, new int[]{-51});
    rules[115] = new Rule(-37, new int[]{-52});
    rules[116] = new Rule(-37, new int[]{-53});
    rules[117] = new Rule(-37, new int[]{-54});
    rules[118] = new Rule(-37, new int[]{-55});
    rules[119] = new Rule(-37, new int[]{-56});
    rules[120] = new Rule(-37, new int[]{-57});
    rules[121] = new Rule(-37, new int[]{-58});
    rules[122] = new Rule(-37, new int[]{-59});
    rules[123] = new Rule(-37, new int[]{-60});
    rules[124] = new Rule(-37, new int[]{-61});
    rules[125] = new Rule(-37, new int[]{-62});
    rules[126] = new Rule(-49, new int[]{-15,5,-15});
    rules[127] = new Rule(-50, new int[]{-15,4,-15});
    rules[128] = new Rule(-43, new int[]{-15,8,-15});
    rules[129] = new Rule(-44, new int[]{-15,9,-15});
    rules[130] = new Rule(-45, new int[]{-15,10,-15});
    rules[131] = new Rule(-46, new int[]{-15,11,-15});
    rules[132] = new Rule(-48, new int[]{-15,13,-15});
    rules[133] = new Rule(-47, new int[]{-15,12,-15});
    rules[134] = new Rule(-51, new int[]{-15,14,-15});
    rules[135] = new Rule(-52, new int[]{-15,15,-15});
    rules[136] = new Rule(-53, new int[]{-15,16,-15});
    rules[137] = new Rule(-54, new int[]{-15,6,-15});
    rules[138] = new Rule(-55, new int[]{-15,7,-15});
    rules[139] = new Rule(-61, new int[]{-15,76,43});
    rules[140] = new Rule(-62, new int[]{-15,76,42,43});
    rules[141] = new Rule(-58, new int[]{-28,21,22});
    rules[142] = new Rule(-58, new int[]{-28,21,-63,22});
    rules[143] = new Rule(-63, new int[]{-63,23,-64});
    rules[144] = new Rule(-63, new int[]{-64});
    rules[145] = new Rule(-64, new int[]{-37});
    rules[146] = new Rule(-57, new int[]{21,-15,22});
    rules[147] = new Rule(-56, new int[]{-18});
    rules[148] = new Rule(-56, new int[]{-32});
    rules[149] = new Rule(-56, new int[]{-33});
    rules[150] = new Rule(-56, new int[]{-34});
    rules[151] = new Rule(-56, new int[]{-35});
    rules[152] = new Rule(-56, new int[]{-39});
    rules[153] = new Rule(-60, new int[]{71});
    rules[154] = new Rule(-59, new int[]{16});
    rules[155] = new Rule(-18, new int[]{-28});
    rules[156] = new Rule(-18, new int[]{-65});
    rules[157] = new Rule(-28, new int[]{19});
    rules[158] = new Rule(-65, new int[]{57});
    rules[159] = new Rule(-32, new int[]{17});
    rules[160] = new Rule(-33, new int[]{18});
    rules[161] = new Rule(-34, new int[]{32});
    rules[162] = new Rule(-34, new int[]{33});
    rules[163] = new Rule(-35, new int[]{43});
    rules[164] = new Rule(-39, new int[]{20});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // list -> stat
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 3: // stat -> select_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 4: // stat -> update_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 5: // stat -> delete_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 6: // stat -> insert_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 7: // stat -> create_table_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 8: // stat -> drop_table_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 9: // stat -> alter_table_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 10: // stat -> show_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 11: // stat -> create_index_stmt
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 12: // select_stmt -> TSELECT, select_field_list, TFROM, select_table
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 13: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TWHERE, 
               //                condition
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null); }
        break;
      case 14: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TORDER, TBY, 
               //                order_list
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-4].n, null, ValueStack[ValueStack.Depth-1].n, null, null, null); }
        break;
      case 15: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TWHERE, 
               //                condition, TORDER, TBY, order_list
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-8].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-1].n, null, null, null); }
        break;
      case 16: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TLIMIT, 
               //                select_limit_offset
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-3].n, null, null, ValueStack[ValueStack.Depth-1].n, null, null); }
        break;
      case 17: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TLIMIT, 
               //                select_limit_offset, TOFFSET, select_limit_offset
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-7].n, ValueStack[ValueStack.Depth-5].n, null, null, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null); }
        break;
      case 18: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TWHERE, 
               //                condition, TLIMIT, select_limit_offset
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-7].n, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-3].n, null, ValueStack[ValueStack.Depth-1].n, null, null); }
        break;
      case 19: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TWHERE, 
               //                condition, TLIMIT, select_limit_offset, TOFFSET, 
               //                select_limit_offset
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-9].n, ValueStack[ValueStack.Depth-7].n, ValueStack[ValueStack.Depth-5].n, null, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null); }
        break;
      case 20: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TORDER, TBY, 
               //                order_list, TLIMIT, select_limit_offset
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-8].n, ValueStack[ValueStack.Depth-6].n, null, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null); }
        break;
      case 21: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TWHERE, 
               //                condition, TORDER, TBY, order_list, TLIMIT, select_limit_offset
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-10].n, ValueStack[ValueStack.Depth-8].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null); }
        break;
      case 22: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TORDER, TBY, 
               //                order_list, TLIMIT, select_limit_offset, TOFFSET, 
               //                select_limit_offset
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-10].n, ValueStack[ValueStack.Depth-8].n, null, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null); }
        break;
      case 23: // select_stmt -> TSELECT, select_field_list, TFROM, select_table, TWHERE, 
               //                condition, TORDER, TBY, order_list, TLIMIT, select_limit_offset, 
               //                TOFFSET, select_limit_offset
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-12].n, ValueStack[ValueStack.Depth-10].n, ValueStack[ValueStack.Depth-8].n, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null); }
        break;
      case 24: // insert_stmt -> TINSERT, TINTO, any_identifier, LPAREN, insert_field_list, 
               //                RPAREN, TVALUES, LPAREN, values_list, RPAREN
{ CurrentSemanticValue.n = new(NodeType.Insert, ValueStack[ValueStack.Depth-8].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null); }
        break;
      case 25: // insert_stmt -> TINSERT, TINTO, any_identifier, TVALUES, LPAREN, values_list, 
               //                RPAREN
{ CurrentSemanticValue.n = new(NodeType.Insert, ValueStack[ValueStack.Depth-5].n, null, ValueStack[ValueStack.Depth-2].n, null, null, null, null); }
        break;
      case 26: // update_stmt -> TUPDATE, any_identifier, TSET, update_list, TWHERE, condition
{ CurrentSemanticValue.n = new(NodeType.Update, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null); }
        break;
      case 27: // delete_stmt -> TDELETE, TFROM, any_identifier, TWHERE, condition
{ CurrentSemanticValue.n = new(NodeType.Delete, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 28: // create_table_stmt -> TCREATE, TTABLE, any_identifier, LPAREN, 
               //                      create_table_item_list, RPAREN
{ CurrentSemanticValue.n = new(NodeType.CreateTable, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null); }
        break;
      case 29: // create_table_stmt -> TCREATE, TTABLE, TIF, TNOT, TEXISTS, any_identifier, 
               //                      LPAREN, create_table_item_list, RPAREN
{ CurrentSemanticValue.n = new(NodeType.CreateTableIfNotExists, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null); }
        break;
      case 30: // create_table_stmt -> TCREATE, TTABLE, any_identifier, LPAREN, 
               //                      create_table_item_list, RPAREN, 
               //                      create_table_constraint_list
{ CurrentSemanticValue.n = new(NodeType.CreateTable, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null); }
        break;
      case 31: // create_table_stmt -> TCREATE, TTABLE, TIF, TNOT, TEXISTS, any_identifier, 
               //                      LPAREN, create_table_item_list, RPAREN, 
               //                      create_table_constraint_list
{ CurrentSemanticValue.n = new(NodeType.CreateTableIfNotExists, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null); }
        break;
      case 32: // drop_table_stmt -> TDROP, TTABLE, any_identifier
{ CurrentSemanticValue.n = new(NodeType.DropTable, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null); }
        break;
      case 33: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TWADD, any_identifier, 
               //                     field_type
{ CurrentSemanticValue.n = new(NodeType.AlterTableAddColumn, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null); }
        break;
      case 34: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TWADD, TCOLUMN, 
               //                     any_identifier, field_type
{ CurrentSemanticValue.n = new(NodeType.AlterTableAddColumn, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null); }
        break;
      case 35: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TWADD, TCOLUMN, 
               //                     any_identifier, field_type, create_table_field_constraint
{ CurrentSemanticValue.n = new(NodeType.AlterTableAddColumn, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null); }
        break;
      case 36: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TDROP, any_identifier
{ CurrentSemanticValue.n = new(NodeType.AlterTableDropColumn, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 37: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TDROP, TCOLUMN, 
               //                     any_identifier
{ CurrentSemanticValue.n = new(NodeType.AlterTableDropColumn, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 38: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TWADD, TINDEX, 
               //                     any_identifier, LPAREN, identifier_index_list, RPAREN
{ CurrentSemanticValue.n = new(NodeType.AlterTableAddIndex, ValueStack[ValueStack.Depth-7].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null); }
        break;
      case 39: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TWADD, TINDEX, 
               //                     any_identifier, TON, LPAREN, identifier_index_list, RPAREN
{ CurrentSemanticValue.n = new(NodeType.AlterTableAddIndex, ValueStack[ValueStack.Depth-8].n, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null); }
        break;
      case 40: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TWADD, TUNIQUE, 
               //                     any_identifier, LPAREN, identifier_index_list, RPAREN
{ CurrentSemanticValue.n = new(NodeType.AlterTableAddUniqueIndex, ValueStack[ValueStack.Depth-7].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null); }
        break;
      case 41: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TWADD, TUNIQUE, 
               //                     any_identifier, TON, LPAREN, identifier_index_list, RPAREN
{ CurrentSemanticValue.n = new(NodeType.AlterTableAddUniqueIndex, ValueStack[ValueStack.Depth-8].n, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null); }
        break;
      case 42: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TWADD, TUNIQUE, TINDEX, 
               //                     any_identifier, LPAREN, identifier_index_list, RPAREN
{ CurrentSemanticValue.n = new(NodeType.AlterTableAddUniqueIndex, ValueStack[ValueStack.Depth-8].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null); }
        break;
      case 43: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TWADD, TUNIQUE, TINDEX, 
               //                     any_identifier, TON, LPAREN, identifier_index_list, RPAREN
{ CurrentSemanticValue.n = new(NodeType.AlterTableAddUniqueIndex, ValueStack[ValueStack.Depth-9].n, ValueStack[ValueStack.Depth-5].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null); }
        break;
      case 44: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TDROP, TINDEX, 
               //                     any_identifier
{ CurrentSemanticValue.n = new(NodeType.AlterTableDropIndex, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 45: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TWADD, TPRIMARY, TKEY, 
               //                     LPAREN, identifier_index_list, RPAREN
{ CurrentSemanticValue.n = new(NodeType.AlterTableAddPrimaryKey, ValueStack[ValueStack.Depth-7].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null); }
        break;
      case 46: // alter_table_stmt -> TALTER, TTABLE, any_identifier, TDROP, TPRIMARY, TKEY
{ CurrentSemanticValue.n = new(NodeType.AlterTableDropPrimaryKey, ValueStack[ValueStack.Depth-4].n, null, null, null, null, null, null); }
        break;
      case 47: // create_index_stmt -> TCREATE, TINDEX, any_identifier, TON, any_identifier, 
               //                      LPAREN, identifier_index_list, RPAREN
{ CurrentSemanticValue.n = new(NodeType.AlterTableAddIndex, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null); }
        break;
      case 48: // create_index_stmt -> TCREATE, TUNIQUE, TINDEX, any_identifier, TON, 
               //                      any_identifier, LPAREN, identifier_index_list, RPAREN
{ CurrentSemanticValue.n = new(NodeType.AlterTableAddUniqueIndex, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-6].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null); }
        break;
      case 49: // show_stmt -> TSHOW, TCOLUMNS, TFROM, any_identifier
{ CurrentSemanticValue.n = new(NodeType.ShowColumns, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null); }
        break;
      case 50: // show_stmt -> TSHOW, TTABLES
{ CurrentSemanticValue.n = new(NodeType.ShowTables, null, null, null, null, null, null, null); }
        break;
      case 51: // show_stmt -> TDESCRIBE, any_identifier
{ CurrentSemanticValue.n = new(NodeType.ShowColumns, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null); }
        break;
      case 52: // show_stmt -> TDESC, any_identifier
{ CurrentSemanticValue.n = new(NodeType.ShowColumns, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null); }
        break;
      case 53: // show_stmt -> TSHOW, TCREATE, TTABLE, any_identifier
{ CurrentSemanticValue.n = new(NodeType.ShowCreateTable, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null); }
        break;
      case 54: // show_stmt -> TSHOW, TDATABASE
{ CurrentSemanticValue.n = new(NodeType.ShowDatabase, null, null, null, null, null, null, null); }
        break;
      case 55: // show_stmt -> TSHOW, TINDEXES, TFROM, any_identifier
{ CurrentSemanticValue.n = new(NodeType.ShowIndexes, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null); }
        break;
      case 56: // show_stmt -> TSHOW, TINDEX, TFROM, any_identifier
{ CurrentSemanticValue.n = new(NodeType.ShowIndexes, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null, null); }
        break;
      case 57: // identifier_index_list -> identifier_index_list, TCOMMA, identifier_index
{ CurrentSemanticValue.n = new(NodeType.IndexIdentifierList, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 58: // identifier_index_list -> identifier_index
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 59: // identifier_index -> any_identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 60: // identifier_index -> any_identifier, TASC
{ CurrentSemanticValue.n = new(NodeType.IndexIdentifierAsc, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, null); }
        break;
      case 61: // identifier_index -> any_identifier, TDESC
{ CurrentSemanticValue.n = new(NodeType.IndexIdentifierDesc, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, null); }
        break;
      case 62: // select_table -> any_identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 63: // select_table -> any_identifier, TAT, LBRACE, identifier, TEQUALS, identifier, 
               //                 RBRACE
{ CurrentSemanticValue.n = new(NodeType.IdentifierWithOpts, ValueStack[ValueStack.Depth-7].n, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null); }
        break;
      case 64: // create_table_item_list -> create_table_item_list, TCOMMA, create_table_item
{ CurrentSemanticValue.n = new(NodeType.CreateTableItemList, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 65: // create_table_item_list -> create_table_item
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 66: // create_table_item -> any_identifier, field_type
{ CurrentSemanticValue.n = new(NodeType.CreateTableItem, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 67: // create_table_item -> any_identifier, field_type, 
               //                      create_table_field_constraint_list
{ CurrentSemanticValue.n = new(NodeType.CreateTableItem, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null); }
        break;
      case 68: // create_table_constraint_list -> TPRIMARY, TKEY, LPAREN, identifier_index_list, 
               //                                 RPAREN
{ CurrentSemanticValue.n = new(NodeType.CreateTableConstraintPrimaryKey, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, null); }
        break;
      case 69: // create_table_field_constraint_list -> create_table_field_constraint_list, 
               //                                       create_table_field_constraint
{ CurrentSemanticValue.n = new(NodeType.CreateTableFieldConstraintList, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 70: // create_table_field_constraint_list -> create_table_field_constraint
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 71: // create_table_field_constraint -> TNULL
{ CurrentSemanticValue.n = new(NodeType.ConstraintNull, null, null, null, null, null, null, null); }
        break;
      case 72: // create_table_field_constraint -> TNOT, TNULL
{ CurrentSemanticValue.n = new(NodeType.ConstraintNotNull, null, null, null, null, null, null, null); }
        break;
      case 73: // create_table_field_constraint -> TPRIMARY, TKEY
{ CurrentSemanticValue.n = new(NodeType.ConstraintPrimaryKey, null, null, null, null, null, null, null); }
        break;
      case 74: // create_table_field_constraint -> TUNIQUE
{ CurrentSemanticValue.n = new(NodeType.ConstraintUnique, null, null, null, null, null, null, null); }
        break;
      case 75: // create_table_field_constraint -> TDEFAULT, LPAREN, default_expr, RPAREN
{ CurrentSemanticValue.n = new(NodeType.ConstraintDefault, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null, null); }
        break;
      case 76: // default_expr -> number
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 77: // default_expr -> string
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 78: // default_expr -> bool
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 79: // default_expr -> null
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 80: // field_type -> TTYPE_OBJECT_ID
{ CurrentSemanticValue.n = new(NodeType.TypeObjectId, null, null, null, null, null, null, null); }
        break;
      case 81: // field_type -> TTYPE_STRING
{ CurrentSemanticValue.n = new(NodeType.TypeString, null, null, null, null, null, null, null); }
        break;
      case 82: // field_type -> TTYPE_INT64
{ CurrentSemanticValue.n = new(NodeType.TypeInteger64, null, null, null, null, null, null, null); }
        break;
      case 83: // field_type -> TTYPE_FLOAT64
{ CurrentSemanticValue.n = new(NodeType.TypeFloat64, null, null, null, null, null, null, null); }
        break;
      case 84: // field_type -> TTYPE_BOOL
{ CurrentSemanticValue.n = new(NodeType.TypeBool, null, null, null, null, null, null, null); }
        break;
      case 85: // update_list -> update_list, TCOMMA, update_item
{ CurrentSemanticValue.n = new(NodeType.UpdateList, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 86: // update_list -> update_item
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 87: // update_item -> any_identifier, TEQUALS, expr
{ CurrentSemanticValue.n = new(NodeType.UpdateItem, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 88: // select_field_list -> select_field_list, TCOMMA, select_field_item
{ CurrentSemanticValue.n = new(NodeType.IdentifierList, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 89: // select_field_list -> select_field_item
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 90: // select_field_item -> expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 91: // select_field_item -> expr, TAS, any_identifier
{ CurrentSemanticValue.n = new(NodeType.ExprAlias, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 92: // select_limit_offset -> number
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 93: // select_limit_offset -> placeholder
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 94: // insert_field_list -> insert_field_list, TCOMMA, insert_field_item
{ CurrentSemanticValue.n = new(NodeType.IdentifierList, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 95: // insert_field_list -> insert_field_item
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 96: // insert_field_item -> any_identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 97: // values_list -> values_list, TCOMMA, values_item
{ CurrentSemanticValue.n = new(NodeType.ExprList, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 98: // values_list -> values_item
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 99: // values_item -> expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 100: // order_list -> order_list, TCOMMA, order_item
{ CurrentSemanticValue.n = new(NodeType.IdentifierList, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 101: // order_list -> order_item
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 102: // order_item -> any_identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 103: // order_item -> any_identifier, TASC
{ CurrentSemanticValue.n = new(NodeType.SortAsc, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 104: // order_item -> any_identifier, TDESC
{ CurrentSemanticValue.n = new(NodeType.SortDesc, ValueStack[ValueStack.Depth-2].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 105: // condition -> expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 106: // expr -> equals_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 107: // expr -> not_equals_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 108: // expr -> less_than_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 109: // expr -> greater_than_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 110: // expr -> less_equals_than_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 111: // expr -> greater_equals_than_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 112: // expr -> and_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 113: // expr -> or_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 114: // expr -> add_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 115: // expr -> sub_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 116: // expr -> mult_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 117: // expr -> like_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 118: // expr -> ilike_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 119: // expr -> simple_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 120: // expr -> group_paren_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 121: // expr -> fcall_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 122: // expr -> projection_all
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 123: // expr -> use_default_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 124: // expr -> is_null_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 125: // expr -> is_not_null_expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 126: // and_expr -> condition, TAND, condition
{ CurrentSemanticValue.n = new(NodeType.ExprAnd, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 127: // or_expr -> condition, TOR, condition
{ CurrentSemanticValue.n = new(NodeType.ExprOr, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 128: // equals_expr -> condition, TEQUALS, condition
{ CurrentSemanticValue.n = new(NodeType.ExprEquals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 129: // not_equals_expr -> condition, TNOTEQUALS, condition
{ CurrentSemanticValue.n = new(NodeType.ExprNotEquals, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 130: // less_than_expr -> condition, TLESSTHAN, condition
{ CurrentSemanticValue.n = new(NodeType.ExprLessThan, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 131: // greater_than_expr -> condition, TGREATERTHAN, condition
{ CurrentSemanticValue.n = new(NodeType.ExprGreaterThan, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 132: // greater_equals_than_expr -> condition, TGREATERTHANEQUALS, condition
{ CurrentSemanticValue.n = new(NodeType.ExprGreaterEqualsThan, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 133: // less_equals_than_expr -> condition, TLESSTHANEQUALS, condition
{ CurrentSemanticValue.n = new(NodeType.ExprLessEqualsThan, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 134: // add_expr -> condition, TADD, condition
{ CurrentSemanticValue.n = new(NodeType.ExprAdd, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 135: // sub_expr -> condition, TMINUS, condition
{ CurrentSemanticValue.n = new(NodeType.ExprSub, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 136: // mult_expr -> condition, TMULT, condition
{ CurrentSemanticValue.n = new(NodeType.ExprMult, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 137: // like_expr -> condition, TLIKE, condition
{ CurrentSemanticValue.n = new(NodeType.ExprLike, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 138: // ilike_expr -> condition, TILIKE, condition
{ CurrentSemanticValue.n = new(NodeType.ExprILike, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 139: // is_null_expr -> condition, TIS, TNULL
{ CurrentSemanticValue.n = new(NodeType.ExprIsNull, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 140: // is_not_null_expr -> condition, TIS, TNOT, TNULL
{ CurrentSemanticValue.n = new(NodeType.ExprIsNotNull, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null); }
        break;
      case 141: // fcall_expr -> identifier, LPAREN, RPAREN
{ CurrentSemanticValue.n = new(NodeType.ExprFuncCall, ValueStack[ValueStack.Depth-3].n, null, null, null, null, null, null); }
        break;
      case 142: // fcall_expr -> identifier, LPAREN, fcall_argument_list, RPAREN
{ CurrentSemanticValue.n = new(NodeType.ExprFuncCall, ValueStack[ValueStack.Depth-4].n, ValueStack[ValueStack.Depth-2].n, null, null, null, null, null); }
        break;
      case 143: // fcall_argument_list -> fcall_argument_list, TCOMMA, fcall_argument_item
{ CurrentSemanticValue.n = new(NodeType.ExprArgumentList, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n, null, null, null, null, null); }
        break;
      case 144: // fcall_argument_list -> fcall_argument_item
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 145: // fcall_argument_item -> expr
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 146: // group_paren_expr -> LPAREN, condition, RPAREN
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-2].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-2].s; }
        break;
      case 147: // simple_expr -> any_identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 148: // simple_expr -> number
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 149: // simple_expr -> string
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 150: // simple_expr -> bool
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 151: // simple_expr -> null
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 152: // simple_expr -> placeholder
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 153: // use_default_expr -> TDEFAULT
{ CurrentSemanticValue.n = new(NodeType.ExprDefault, null, null, null, null, null, null, null); }
        break;
      case 154: // projection_all -> TMULT
{ CurrentSemanticValue.n = new(NodeType.ExprAllFields, null, null, null, null, null, null, null); }
        break;
      case 155: // any_identifier -> identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 156: // any_identifier -> escaped_identifier
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; CurrentSemanticValue.s = ValueStack[ValueStack.Depth-1].s; }
        break;
      case 157: // identifier -> TIDENTIFIER
{ CurrentSemanticValue.n = new(NodeType.Identifier, null, null, null, null, null, null, CurrentSemanticValue.s); }
        break;
      case 158: // escaped_identifier -> TESCAPED_IDENTIFIER
{ CurrentSemanticValue.n = new(NodeType.Identifier, null, null, null, null, null, null, CurrentSemanticValue.s.Trim('`')); }
        break;
      case 159: // number -> TDIGIT
{ CurrentSemanticValue.n = new(NodeType.Number, null, null, null, null, null, null, CurrentSemanticValue.s); }
        break;
      case 160: // string -> TSTRING
{ CurrentSemanticValue.n = new(NodeType.String, null, null, null, null, null, null, CurrentSemanticValue.s); }
        break;
      case 161: // bool -> TTRUE
{ CurrentSemanticValue.n = new(NodeType.Bool, null, null, null, null, null, null, "true"); }
        break;
      case 162: // bool -> TFALSE
{ CurrentSemanticValue.n = new(NodeType.Bool, null, null, null, null, null, null, "false"); }
        break;
      case 163: // null -> TNULL
{ CurrentSemanticValue.n = new(NodeType.Null, null, null, null, null, null, null, "null"); }
        break;
      case 164: // placeholder -> TPLACEHOLDER
{ CurrentSemanticValue.n = new(NodeType.Placeholder, null, null, null, null, null, null, CurrentSemanticValue.s); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
