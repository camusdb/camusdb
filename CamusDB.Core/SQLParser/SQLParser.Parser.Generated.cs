// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, John Gough, QUT 2005-2014
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.5.2
// DateTime: 11/19/2023 10:23:19 PM
// Input file <SQLParser/SQLParser.Language.grammar.y - 11/19/2023 10:23:17 PM>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Globalization;
using System.Text;
using QUT.Gppg;

namespace CamusDB.Core.SQLParser
{
internal enum Token {error=2,EOF=3,DIGIT=4,IDENTIFIER=5,LPAREN=6,
    RPAREN=7,TCOMMA=8,TMULT=9,TADD=10,TMINUS=11,TDIV=12,
    TSELECT=13,TFROM=14};

internal partial struct ValueType
{ 
        public NodeAst n;
        public string s;
}
// Abstract base class for GPLEX scanners
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal abstract class ScanBase : AbstractScanner<ValueType,LexLocation> {
  private LexLocation __yylloc = new LexLocation();
  public override LexLocation yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

// Utility class for encapsulating token information
[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal class ScanObj {
  public int token;
  public ValueType yylval;
  public LexLocation yylloc;
  public ScanObj( int t, ValueType val, LexLocation loc ) {
    this.token = t; this.yylval = val; this.yylloc = loc;
  }
}

[GeneratedCodeAttribute( "Gardens Point Parser Generator", "1.5.2")]
internal partial class sqlParser: ShiftReduceParser<ValueType, LexLocation>
{
#pragma warning disable 649
  private static Dictionary<int, string> aliases;
#pragma warning restore 649
  private static Rule[] rules = new Rule[9];
  private static State[] states = new State[13];
  private static string[] nonTerms = new string[] {
      "list", "$accept", "stat", "expr", "identifier_list", "identifier", "number", 
      };

  static sqlParser() {
    states[0] = new State(new int[]{13,5},new int[]{-1,1,-3,3,-4,4});
    states[1] = new State(new int[]{3,2});
    states[2] = new State(-1);
    states[3] = new State(-2);
    states[4] = new State(-3);
    states[5] = new State(new int[]{5,12},new int[]{-5,6});
    states[6] = new State(new int[]{14,7,8,10});
    states[7] = new State(new int[]{5,9},new int[]{-6,8});
    states[8] = new State(-4);
    states[9] = new State(-7);
    states[10] = new State(new int[]{5,11});
    states[11] = new State(-5);
    states[12] = new State(-6);

    for (int sNo = 0; sNo < states.Length; sNo++) states[sNo].number = sNo;

    rules[1] = new Rule(-2, new int[]{-1,3});
    rules[2] = new Rule(-1, new int[]{-3});
    rules[3] = new Rule(-3, new int[]{-4});
    rules[4] = new Rule(-4, new int[]{13,-5,14,-6});
    rules[5] = new Rule(-5, new int[]{-5,8,5});
    rules[6] = new Rule(-5, new int[]{5});
    rules[7] = new Rule(-6, new int[]{5});
    rules[8] = new Rule(-7, new int[]{4});
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Token.error, (int)Token.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
#pragma warning disable 162, 1522
    switch (action)
    {
      case 2: // list -> stat
{ CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 3: // stat -> expr
{ System.Console.WriteLine("expr={0}", ValueStack[ValueStack.Depth-1].n.nodeType); CurrentSemanticValue.n = ValueStack[ValueStack.Depth-1].n; }
        break;
      case 4: // expr -> TSELECT, identifier_list, TFROM, identifier
{ CurrentSemanticValue.n = new(NodeType.Select, ValueStack[ValueStack.Depth-3].n, null); }
        break;
      case 5: // identifier_list -> identifier_list, TCOMMA, IDENTIFIER
{ CurrentSemanticValue.n = new(NodeType.IdentifierList, ValueStack[ValueStack.Depth-3].n, ValueStack[ValueStack.Depth-1].n); }
        break;
      case 6: // identifier_list -> IDENTIFIER
{ CurrentSemanticValue.n = new(NodeType.Identifier, null, null); }
        break;
      case 7: // identifier -> IDENTIFIER
{ CurrentSemanticValue.n = new(NodeType.Identifier, null, null); }
        break;
      case 8: // number -> DIGIT
{ CurrentSemanticValue.n = new(NodeType.ExprDigit, null, null); }
        break;
    }
#pragma warning restore 162, 1522
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliases != null && aliases.ContainsKey(terminal))
        return aliases[terminal];
    else if (((Token)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Token)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
